{"ast":null,"code":"import { getEnum } from \"./utils\";\n\nfunction getBasicFieldName(schema, _mapping) {\n  var type = schema.type,\n      format = schema.format; // 如果已经注明了渲染widget，那最好\n\n  if (schema.component) {\n    return schema.component;\n  }\n\n  var list = [];\n\n  if (getEnum(schema) && !format) {\n    list.push(\"\".concat(type, \"?enum\"));\n  }\n\n  if (format) {\n    list.push(\"\".concat(type, \":\").concat(format));\n  }\n\n  list.push(type); // 放在最后兜底，其他使用type默认的组件\n\n  var found = list.find(function (item) {\n    return !!_mapping[item];\n  });\n  return _mapping[found] || \"\";\n}\n\nexport default function getBasicField() {\n  var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      customized = _ref.customized,\n      generated = _ref.generated,\n      mapping = _ref.mapping;\n\n  var component = schema.component,\n      widget = schema.widget; // Field 能否被重定义\n\n  var fieldCanRedefine = false;\n  var Field; // component是字符串，从generated中查，不是的话，就是本身\n\n  var _component = typeof component === \"string\" ? generated[component] : component;\n\n  if (widget && !Field) {\n    Field = typeof widget === \"string\" ? customized[widget] : widget;\n  }\n\n  if (!Field && _component) {\n    Field = _component;\n  }\n\n  if (!Field && !_component) {\n    Field = generated[getBasicFieldName(schema, mapping)];\n    fieldCanRedefine = !!Field;\n  }\n\n  return {\n    fieldCanRedefine: fieldCanRedefine,\n    Field: Field || null\n  };\n}","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/图元/react-visual-data/src/library/form-render/getField.js"],"names":["getEnum","getBasicFieldName","schema","_mapping","type","format","component","list","push","found","find","item","getBasicField","customized","generated","mapping","widget","fieldCanRedefine","Field","_component"],"mappings":"AAAA,SAASA,OAAT,QAAwB,SAAxB;;AAEA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,QAAnC,EAA6C;AAAA,MACnCC,IADmC,GAClBF,MADkB,CACnCE,IADmC;AAAA,MAC7BC,MAD6B,GAClBH,MADkB,CAC7BG,MAD6B,EAG3C;;AACA,MAAIH,MAAM,CAACI,SAAX,EAAsB;AACpB,WAAOJ,MAAM,CAACI,SAAd;AACD;;AAED,MAAMC,IAAI,GAAG,EAAb;;AACA,MAAIP,OAAO,CAACE,MAAD,CAAP,IAAmB,CAACG,MAAxB,EAAgC;AAC9BE,IAAAA,IAAI,CAACC,IAAL,WAAaJ,IAAb;AACD;;AACD,MAAIC,MAAJ,EAAY;AACVE,IAAAA,IAAI,CAACC,IAAL,WAAaJ,IAAb,cAAqBC,MAArB;AACD;;AACDE,EAAAA,IAAI,CAACC,IAAL,CAAUJ,IAAV,EAf2C,CAe1B;;AACjB,MAAMK,KAAK,GAAGF,IAAI,CAACG,IAAL,CAAU,UAACC,IAAD;AAAA,WAAU,CAAC,CAACR,QAAQ,CAACQ,IAAD,CAApB;AAAA,GAAV,CAAd;AACA,SAAOR,QAAQ,CAACM,KAAD,CAAR,IAAmB,EAA1B;AACD;;AAED,eAAe,SAASG,aAAT,GAAwE;AAAA,MAAjDV,MAAiD,uEAAxC,EAAwC;;AAAA;AAAA,MAAlCW,UAAkC,QAAlCA,UAAkC;AAAA,MAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAAA,MAC7ET,SAD6E,GACvDJ,MADuD,CAC7EI,SAD6E;AAAA,MAClEU,MADkE,GACvDd,MADuD,CAClEc,MADkE,EAErF;;AACA,MAAIC,gBAAgB,GAAG,KAAvB;AACA,MAAIC,KAAJ,CAJqF,CAKrF;;AACA,MAAMC,UAAU,GAAG,OAAOb,SAAP,KAAqB,QAArB,GAAgCQ,SAAS,CAACR,SAAD,CAAzC,GAAuDA,SAA1E;;AACA,MAAIU,MAAM,IAAI,CAACE,KAAf,EAAsB;AACpBA,IAAAA,KAAK,GAAG,OAAOF,MAAP,KAAkB,QAAlB,GAA6BH,UAAU,CAACG,MAAD,CAAvC,GAAkDA,MAA1D;AACD;;AACD,MAAI,CAACE,KAAD,IAAUC,UAAd,EAA0B;AACxBD,IAAAA,KAAK,GAAGC,UAAR;AACD;;AACD,MAAI,CAACD,KAAD,IAAU,CAACC,UAAf,EAA2B;AACzBD,IAAAA,KAAK,GAAGJ,SAAS,CAACb,iBAAiB,CAACC,MAAD,EAASa,OAAT,CAAlB,CAAjB;AACAE,IAAAA,gBAAgB,GAAG,CAAC,CAACC,KAArB;AACD;;AACD,SAAO;AACLD,IAAAA,gBAAgB,EAAhBA,gBADK;AAELC,IAAAA,KAAK,EAAEA,KAAK,IAAI;AAFX,GAAP;AAID","sourcesContent":["import { getEnum } from \"./utils\";\n\nfunction getBasicFieldName(schema, _mapping) {\n  const { type, format } = schema;\n\n  // 如果已经注明了渲染widget，那最好\n  if (schema.component) {\n    return schema.component;\n  }\n\n  const list = [];\n  if (getEnum(schema) && !format) {\n    list.push(`${type}?enum`);\n  }\n  if (format) {\n    list.push(`${type}:${format}`);\n  }\n  list.push(type); // 放在最后兜底，其他使用type默认的组件\n  const found = list.find((item) => !!_mapping[item]);\n  return _mapping[found] || \"\";\n}\n\nexport default function getBasicField(schema = {}, { customized, generated, mapping }) {\n  const { component, widget } = schema;\n  // Field 能否被重定义\n  let fieldCanRedefine = false;\n  let Field;\n  // component是字符串，从generated中查，不是的话，就是本身\n  const _component = typeof component === \"string\" ? generated[component] : component;\n  if (widget && !Field) {\n    Field = typeof widget === \"string\" ? customized[widget] : widget;\n  }\n  if (!Field && _component) {\n    Field = _component;\n  }\n  if (!Field && !_component) {\n    Field = generated[getBasicFieldName(schema, mapping)];\n    fieldCanRedefine = !!Field;\n  }\n  return {\n    fieldCanRedefine,\n    Field: Field || null\n  };\n}\n"]},"metadata":{},"sourceType":"module"}