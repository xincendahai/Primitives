{"ast":null,"code":"import { cloneDeep } from \"~utils\";\nimport { isEmpty, deepMergeObj } from \"~utils/helper\";\nimport { isFunction } from \"./utils\"; // 获取当前字段默认值\n\nfunction getDefaultValue(schema) {\n  var def = schema.default,\n      _schema$enum = schema.enum,\n      enums = _schema$enum === void 0 ? [] : _schema$enum,\n      type = schema.type;\n  var defaultValue = {\n    array: [],\n    boolean: false,\n    integer: \"\",\n    null: null,\n    number: \"\",\n    object: {},\n    string: \"\",\n    range: null\n  };\n\n  if (isFunction(def)) {\n    return defaultValue[type];\n  }\n\n  if (isFunction(enums)) {\n    if (type === \"array\") {\n      return [];\n    }\n\n    if (type === \"string\" || type === \"number\") {\n      return \"\";\n    }\n  } // 如果设置默认值，优先从默认值中获取\n\n\n  if (!isEmpty(def)) {\n    return def;\n  } // array且enum的情况，为多选框，默认值[]\n\n\n  if (type === \"array\" && enums.length) {\n    return [];\n  }\n\n  if (\"default\" in schema || schema.hasOwnProperty(\"default\")) {\n    return schema.default; // 就算default: undefined, 也用 undefined, 这样就可以清空了\n  }\n\n  return defaultValue[type];\n}\n\nfunction schemaResolve(schema, data) {\n  var type = schema.type,\n      properties = schema.properties,\n      items = schema.items,\n      def = schema.default,\n      _schema$required = schema.required,\n      required = _schema$required === void 0 ? false : _schema$required,\n      component = schema.component;\n  var value = isEmpty(data) ? getDefaultValue(schema) : cloneDeep(data);\n\n  if (type === \"object\") {\n    // 如果自定义组件\n    if (component) {\n      return def ? def : value;\n    }\n\n    var subs = properties || {};\n    var ret = {};\n\n    if (!isEmpty(subs)) {\n      Object.keys(subs).forEach(function (name) {\n        if (!required) {\n          ret[name] = schemaResolve(subs[name], value[name]);\n        }\n      });\n    }\n\n    return deepMergeObj(ret, data);\n  }\n\n  if (type === \"array\") {\n    // 如果没有value且default有值，用default\n    if (def && Array.isArray(def) && !value) {\n      return def;\n    } // 如果自定义组件\n\n\n    if (component) return value;\n\n    var _subs = [].concat(items || []);\n\n    var _ret = [];\n\n    if (!isEmpty(value)) {\n      value.forEach(function (item, idx) {\n        _ret[idx] = schemaResolve(_subs[idx] || _subs[0], item);\n      });\n    }\n\n    return _ret;\n  }\n\n  return value;\n}\n\nexport default schemaResolve;","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/图元/react-visual-data/src/library/form-render/resolve.js"],"names":["cloneDeep","isEmpty","deepMergeObj","isFunction","getDefaultValue","schema","def","default","enum","enums","type","defaultValue","array","boolean","integer","null","number","object","string","range","length","hasOwnProperty","schemaResolve","data","properties","items","required","component","value","subs","ret","Object","keys","forEach","name","Array","isArray","concat","item","idx"],"mappings":"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","sourcesContent":["import { cloneDeep } from \"~utils\";\nimport { isEmpty, deepMergeObj } from \"~utils/helper\";\nimport { isFunction } from \"./utils\";\n\n// 获取当前字段默认值\nfunction getDefaultValue(schema) {\n  const { default: def, enum: enums = [], type } = schema;\n  const defaultValue = {\n    array: [],\n    boolean: false,\n    integer: \"\",\n    null: null,\n    number: \"\",\n    object: {},\n    string: \"\",\n    range: null\n  };\n\n  if (isFunction(def)) {\n    return defaultValue[type];\n  }\n  if (isFunction(enums)) {\n    if (type === \"array\") {\n      return [];\n    }\n    if (type === \"string\" || type === \"number\") {\n      return \"\";\n    }\n  }\n\n  // 如果设置默认值，优先从默认值中获取\n  if (!isEmpty(def)) {\n    return def;\n  }\n  // array且enum的情况，为多选框，默认值[]\n  if (type === \"array\" && enums.length) {\n    return [];\n  }\n  if (\"default\" in schema || schema.hasOwnProperty(\"default\")) {\n    return schema.default; // 就算default: undefined, 也用 undefined, 这样就可以清空了\n  }\n  return defaultValue[type];\n}\n\nfunction schemaResolve(schema, data) {\n  const { type, properties, items, default: def, required = false, component } = schema;\n\n  const value = isEmpty(data) ? getDefaultValue(schema) : cloneDeep(data);\n\n  if (type === \"object\") {\n    // 如果自定义组件\n    if (component) {\n      return def ? def : value;\n    }\n    const subs = properties || {};\n    let ret = {};\n\n    if (!isEmpty(subs)) {\n      Object.keys(subs).forEach((name) => {\n        if (!required) {\n          ret[name] = schemaResolve(subs[name], value[name]);\n        }\n      });\n    }\n\n    return deepMergeObj(ret, data);\n  }\n\n  if (type === \"array\") {\n    // 如果没有value且default有值，用default\n    if (def && Array.isArray(def) && !value) {\n      return def;\n    }\n    // 如果自定义组件\n    if (component) return value;\n\n    const subs = [].concat(items || []);\n    let ret = [];\n\n    if (!isEmpty(value)) {\n      value.forEach((item, idx) => {\n        ret[idx] = schemaResolve(subs[idx] || subs[0], item);\n      });\n    }\n\n    return ret;\n  }\n  return value;\n}\n\nexport default schemaResolve;\n"]},"metadata":{},"sourceType":"module"}