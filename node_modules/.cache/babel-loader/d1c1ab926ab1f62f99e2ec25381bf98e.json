{"ast":null,"code":"import { suid, cloneDeep } from \"~utils\";\nimport { isEmpty, deepMergeObj } from \"~utils/helper\";\n/**\n * 新建组件生成配置项\n * @param {*} fields 所有组件配置项\n * @param {*} type 组件类型 form/表单、field/元件、grid/布局\n * @param {*} opts 当前组件配置项\n */\n\nexport function generatorField(fields) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"field\";\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options; // 唯一标识uniqueTag\n\n  var uniqueId = suid();\n  options = cloneDeep(opts);\n  options.uniqueId = uniqueId;\n\n  if (type === \"form\") {\n    var uniqueFieldLenght = fields.filter(function (t) {\n      return t.type === opts.type;\n    }).length;\n\n    if (uniqueFieldLenght > 0) {\n      options.data.title += uniqueFieldLenght;\n      options.data.key += uniqueFieldLenght;\n    }\n  }\n\n  if (type === \"grid\") {\n    options.data.left = fields.length * 3 % 12;\n  }\n\n  return {\n    components: fields.concat(options),\n    fieldId: uniqueId\n  };\n}\n/**\n * 获取当前组件配置项\n * @param {*} fields 所有组件配置项\n * @param {*} id 当前组件id\n */\n\nexport function getFieldConf(fields, id) {\n  return fields.filter(function (o) {\n    return id === o.uniqueId;\n  })[0];\n}\n/**\n * 编译具有层级的数据结构\n * @param {*} flatTree\n * @param {*} deep\n */\n\nexport function setLevelPath(nodes, parentNode) {\n  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"drillDownLevel\";\n  if (nodes.length === 0) return nodes;\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (!parentNode) {\n      nodes[i].data[key] = 0;\n    } else {\n      nodes[i].data[key] = parentNode.data[key] + 1;\n    }\n\n    if (nodes[i].data.drillDown && nodes[i].data.drillDown.length > 0) {\n      setLevelPath(nodes[i].data.drillDown, nodes[i], key);\n    }\n  }\n}\n/**\n * 下钻数据处理 so we have always a relation parent/children of each node\n * @param {*} target\n * @param {*} key\n * @param {*} level\n */\n\nfunction getLevelData(target, key, level, value) {\n  for (var i = 0; i < target.length; i++) {\n    if (target[i].data[key] && target[i].data[key] === level) {\n      target[i].data = deepMergeObj(target[i].data, value);\n      break;\n    }\n\n    if (!isEmpty(target[i].data.drillDown)) {\n      getLevelData(target[i].data.drillDown, key, level, value);\n    }\n  }\n}\n/**\n * 合并组件配置项\n * @param {*} fields 所有组件配置项\n * @param {*} opts 当前组件id、需要合并后的属性值、数据层级\n */\n\n\nexport function mergeFieldConfig(fields, opts, value) {\n  var objKey = \"drillDownLevel\";\n  var parentId = opts.parentId,\n      _opts$level = opts.level,\n      level = _opts$level === void 0 ? 0 : _opts$level;\n  var newFiled = fields.map(function (n) {\n    if (n.uniqueId === parentId) {\n      if (level > 0) {\n        // TODO: 下钻数据合并\n        getLevelData(n.data.drillDown, objKey, level, value);\n      } else {\n        n.data = deepMergeObj(n.data, value);\n      }\n    }\n\n    return n;\n  });\n  return newFiled;\n}\n/**\n * 调整顺序\n * @param {*} arr\n * @param {*} next 添加元素的位置\n * @param {*} prev 删除元素的位置\n */\n\nexport function orderBy(arr, next, prev) {\n  arr[next] = arr.splice(prev, 1, arr[next])[0];\n  return arr;\n}\n/**\n * 获取组件的索引值\n * @param {*} fields 所有组件配置项\n * @param {*} id 当前组件id\n */\n\nexport function getFieldOrderBy(fields, id) {\n  if (isEmpty(fields)) return {};\n  var newFiled = cloneDeep(fields);\n  var index = newFiled.findIndex(function (o) {\n    return o.uniqueId === id;\n  });\n  return {\n    index: index,\n    components: newFiled\n  };\n}\nexport function deleteItem(uniqueId, arr) {\n  var fieldId;\n\n  var _getFieldOrderBy = getFieldOrderBy(arr, uniqueId),\n      index = _getFieldOrderBy.index,\n      components = _getFieldOrderBy.components;\n\n  if (components.length === 1) {\n    fieldId = \"-\";\n  } else if (index > 0) {\n    fieldId = components[index - 1].uniqueId;\n  } else {\n    fieldId = components[index + 1].uniqueId;\n  }\n\n  components.splice(index, 1);\n  return {\n    data: components,\n    uniqueId: fieldId\n  };\n}","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/图元/react-visual-data/src/library/renderer/utils.js"],"names":["suid","cloneDeep","isEmpty","deepMergeObj","generatorField","fields","type","opts","options","uniqueId","uniqueFieldLenght","filter","t","length","data","title","key","left","components","concat","fieldId","getFieldConf","id","o","setLevelPath","nodes","parentNode","i","drillDown","getLevelData","target","level","value","mergeFieldConfig","objKey","parentId","newFiled","map","n","orderBy","arr","next","prev","splice","getFieldOrderBy","index","findIndex","deleteItem"],"mappings":"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","sourcesContent":["import { suid, cloneDeep } from \"~utils\";\nimport { isEmpty, deepMergeObj } from \"~utils/helper\";\n\n/**\n * 新建组件生成配置项\n * @param {*} fields 所有组件配置项\n * @param {*} type 组件类型 form/表单、field/元件、grid/布局\n * @param {*} opts 当前组件配置项\n */\nexport function generatorField(fields, type = \"field\", opts = {}) {\n  let options;\n  // 唯一标识uniqueTag\n  const uniqueId = suid();\n\n  options = cloneDeep(opts);\n  options.uniqueId = uniqueId;\n\n  if (type === \"form\") {\n    let uniqueFieldLenght = fields.filter((t) => t.type === opts.type).length;\n    if (uniqueFieldLenght > 0) {\n      options.data.title += uniqueFieldLenght;\n      options.data.key += uniqueFieldLenght;\n    }\n  }\n\n  if (type === \"grid\") {\n    options.data.left = (fields.length * 3) % 12;\n  }\n  return { components: fields.concat(options), fieldId: uniqueId };\n}\n\n/**\n * 获取当前组件配置项\n * @param {*} fields 所有组件配置项\n * @param {*} id 当前组件id\n */\nexport function getFieldConf(fields, id) {\n  return fields.filter((o) => id === o.uniqueId)[0];\n}\n\n/**\n * 编译具有层级的数据结构\n * @param {*} flatTree\n * @param {*} deep\n */\nexport function setLevelPath(nodes, parentNode, key = \"drillDownLevel\") {\n  if (nodes.length === 0) return nodes;\n  for (let i = 0; i < nodes.length; i++) {\n    if (!parentNode) {\n      nodes[i].data[key] = 0;\n    } else {\n      nodes[i].data[key] = parentNode.data[key] + 1;\n    }\n\n    if (nodes[i].data.drillDown && nodes[i].data.drillDown.length > 0) {\n      setLevelPath(nodes[i].data.drillDown, nodes[i], key);\n    }\n  }\n}\n\n/**\n * 下钻数据处理 so we have always a relation parent/children of each node\n * @param {*} target\n * @param {*} key\n * @param {*} level\n */\nfunction getLevelData(target, key, level, value) {\n  for (let i = 0; i < target.length; i++) {\n    if (target[i].data[key] && target[i].data[key] === level) {\n      target[i].data = deepMergeObj(target[i].data, value);\n      break;\n    }\n    if (!isEmpty(target[i].data.drillDown)) {\n      getLevelData(target[i].data.drillDown, key, level, value);\n    }\n  }\n}\n\n/**\n * 合并组件配置项\n * @param {*} fields 所有组件配置项\n * @param {*} opts 当前组件id、需要合并后的属性值、数据层级\n */\nexport function mergeFieldConfig(fields, opts, value) {\n  let objKey = \"drillDownLevel\";\n\n  const { parentId, level = 0 } = opts;\n\n  let newFiled = fields.map((n) => {\n    if (n.uniqueId === parentId) {\n      if (level > 0) {\n        // TODO: 下钻数据合并\n        getLevelData(n.data.drillDown, objKey, level, value);\n      } else {\n        n.data = deepMergeObj(n.data, value);\n      }\n    }\n    return n;\n  });\n\n  return newFiled;\n}\n\n/**\n * 调整顺序\n * @param {*} arr\n * @param {*} next 添加元素的位置\n * @param {*} prev 删除元素的位置\n */\nexport function orderBy(arr, next, prev) {\n  arr[next] = arr.splice(prev, 1, arr[next])[0];\n  return arr;\n}\n\n/**\n * 获取组件的索引值\n * @param {*} fields 所有组件配置项\n * @param {*} id 当前组件id\n */\nexport function getFieldOrderBy(fields, id) {\n  if (isEmpty(fields)) return {};\n\n  let newFiled = cloneDeep(fields);\n  const index = newFiled.findIndex((o) => o.uniqueId === id);\n  return { index, components: newFiled };\n}\n\nexport function deleteItem(uniqueId, arr) {\n  let fieldId;\n  const { index, components } = getFieldOrderBy(arr, uniqueId);\n\n  if (components.length === 1) {\n    fieldId = \"-\";\n  } else if (index > 0) {\n    fieldId = components[index - 1].uniqueId;\n  } else {\n    fieldId = components[index + 1].uniqueId;\n  }\n  components.splice(index, 1);\n\n  return {\n    data: components,\n    uniqueId: fieldId\n  };\n}\n"]},"metadata":{},"sourceType":"module"}