{"ast":null,"code":"import _objectSpread from \"/Users/xiangmingxin/Wicrecend/\\u56FE\\u5143/react-visual-data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/xiangmingxin/Wicrecend/\\u56FE\\u5143/react-visual-data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport getBasicField from \"./getField\";\nimport subFieldGenerator from \"./subFieldGenerator\"; // 对于数组或对象类型，获取其子集schema\n\nfunction getSubSchemas() {\n  var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var properties = schema.properties,\n      items = schema.items,\n      $parent = _objectWithoutProperties(schema, [\"properties\", \"items\"]);\n\n  var type = $parent.type;\n\n  if (!properties && !items) {\n    return [];\n  }\n\n  var children = {};\n\n  if (type === \"object\") {\n    children = properties;\n  }\n\n  if (type === \"array\") {\n    children = [].concat(items);\n  }\n\n  return Object.keys(children).map(function (name) {\n    return {\n      schema: children[name],\n      name: name,\n      $parent: $parent\n    };\n  });\n}\n\nfunction getBasicProps(settings, materials) {\n  var labelColor = settings.labelColor,\n      schema = settings.schema,\n      name = settings.name,\n      cname = settings.cname,\n      cid = settings.cid,\n      verify = settings.verify,\n      displayType = settings.displayType,\n      labelWidth = settings.labelWidth,\n      formData = settings.formData,\n      disabled = settings.disabled,\n      tooltip = settings.tooltip;\n  if (!schema) return {};\n\n  var className = schema.className,\n      _displayType = schema.displayType,\n      _schema$options = schema.options,\n      options = _schema$options === void 0 ? {} : _schema$options,\n      _disabled = schema.disabled,\n      _schema$extraButtons = schema.extraButtons,\n      extraButtons = _schema$extraButtons === void 0 ? [] : _schema$extraButtons,\n      _tooltip = schema.tooltip,\n      _labelWidth = schema.labelWidth,\n      _schema$required = schema.required,\n      _required = _schema$required === void 0 ? false : _schema$required,\n      hidden = schema.hidden;\n\n  var widgets = materials.generated,\n      fields = materials.customized; // TODO: 标准化属性模型,除了 value 和 onChange 为动态值这里不处理\n  // attr前者单个当前UI的，后者全局的\n\n  var passDownProps = {\n    labelColor: labelColor,\n    cname: cname,\n    cid: cid,\n    verify: verify,\n    displayType: _displayType || displayType,\n    tooltip: _tooltip || tooltip,\n    disabled: _disabled || disabled,\n    labelWidth: _labelWidth || labelWidth\n  };\n\n  var basicProps = _objectSpread(_objectSpread({}, passDownProps), {}, {\n    name: name,\n    widgets: widgets,\n    fields: fields,\n    schema: schema,\n    required: _required,\n    options: options,\n    // TODO: 所有特定组件规则,addable等规则\n    hidden: hidden,\n    formData: formData\n  });\n\n  if (className) {\n    basicProps = _objectSpread(_objectSpread({}, basicProps), {}, {\n      className: className\n    });\n  } // 子集的属性\n\n\n  var subItems = {};\n  var subSchemas = getSubSchemas(schema);\n  subSchemas.forEach(function (subSchema) {\n    var _name = subSchema.name,\n        _subSchema$schema = subSchema.schema,\n        _schema = _subSchema$schema === void 0 ? {} : _subSchema$schema;\n\n    subItems[_name] = {\n      field: getBasicField(_schema, materials),\n      props: getBasicProps(_objectSpread(_objectSpread(_objectSpread({}, subSchema), passDownProps), {}, {\n        formData: formData\n      }), materials)\n    };\n  });\n\n  if ([\"array\", \"object\"].includes(schema.type)) {\n    // 传入 name 和 Field（如果重定义Field的话）及其配置信息（如 onChange 等）\n    basicProps.getSubField = function (m) {\n      var _ref = subItems[m.name] || {},\n          field = _ref.field,\n          props = _ref.props;\n\n      return subFieldGenerator(_objectSpread(_objectSpread({}, field), {}, {\n        props: _objectSpread(_objectSpread({}, props), {}, {\n          name: m.name,\n          rootValue: m.rootValue\n        })\n      }))(m);\n    };\n\n    if (schema.items) {\n      basicProps.extraButtons = extraButtons;\n    }\n  }\n\n  return basicProps;\n}\n/**\n *  schema + materials --> parser --> Field + props\n *  schema {\n *    propsSchema,\n *    data,\n *    name,\n *  }\n *  materials {\n *    generated,\n *    customized,\n *    mapping,\n *  }\n */\n\n\nvar schemaParser = function schemaParser() {\n  var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var materials = arguments.length > 1 ? arguments[1] : undefined;\n  var _settings$schema = settings.schema,\n      schema = _settings$schema === void 0 ? {} : _settings$schema;\n  return {\n    Field: getBasicField(schema, materials).Field,\n    props: getBasicProps(settings, materials)\n  };\n};\n\nexport default schemaParser;","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/图元/react-visual-data/src/library/form-render/parser.js"],"names":["getBasicField","subFieldGenerator","getSubSchemas","schema","properties","items","$parent","type","children","concat","Object","keys","map","name","getBasicProps","settings","materials","labelColor","cname","cid","verify","displayType","labelWidth","formData","disabled","tooltip","className","_displayType","options","_disabled","extraButtons","_tooltip","_labelWidth","required","_required","hidden","widgets","generated","fields","customized","passDownProps","basicProps","subItems","subSchemas","forEach","subSchema","_name","_schema","field","props","includes","getSubField","m","rootValue","schemaParser","Field"],"mappings":"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","sourcesContent":["import getBasicField from \"./getField\";\nimport subFieldGenerator from \"./subFieldGenerator\";\n\n// 对于数组或对象类型，获取其子集schema\nfunction getSubSchemas(schema = {}) {\n  const {\n    properties,\n    items,\n    // as subset's parent\n    ...$parent\n  } = schema;\n  const { type } = $parent;\n  if (!properties && !items) {\n    return [];\n  }\n\n  let children = {};\n  if (type === \"object\") {\n    children = properties;\n  }\n  if (type === \"array\") {\n    children = [].concat(items);\n  }\n\n  return Object.keys(children).map((name) => ({\n    schema: children[name],\n    name,\n    $parent\n  }));\n}\n\nfunction getBasicProps(settings, materials) {\n  const {\n    labelColor,\n    schema,\n    name,\n    cname,\n    cid,\n    verify,\n    displayType,\n    labelWidth,\n    formData,\n    disabled,\n    tooltip\n  } = settings;\n\n  if (!schema) return {};\n\n  const {\n    className,\n    displayType: _displayType,\n    options: options = {},\n    disabled: _disabled,\n    extraButtons: extraButtons = [],\n    tooltip: _tooltip,\n    labelWidth: _labelWidth,\n    required: _required = false,\n    hidden\n  } = schema;\n\n  const { generated: widgets, customized: fields } = materials;\n  // TODO: 标准化属性模型,除了 value 和 onChange 为动态值这里不处理\n  // attr前者单个当前UI的，后者全局的\n  const passDownProps = {\n    labelColor,\n    cname,\n    cid,\n    verify,\n    displayType: _displayType || displayType,\n    tooltip: _tooltip || tooltip,\n    disabled: _disabled || disabled,\n    labelWidth: _labelWidth || labelWidth\n  };\n\n  let basicProps = {\n    ...passDownProps,\n    name,\n    widgets,\n    fields,\n    schema,\n    required: _required,\n    options, // TODO: 所有特定组件规则,addable等规则\n    hidden,\n    formData\n  };\n\n  if (className) {\n    basicProps = { ...basicProps, className };\n  }\n  // 子集的属性\n  const subItems = {};\n  const subSchemas = getSubSchemas(schema);\n  subSchemas.forEach((subSchema) => {\n    const { name: _name, schema: _schema = {} } = subSchema;\n\n    subItems[_name] = {\n      field: getBasicField(_schema, materials),\n      props: getBasicProps(\n        {\n          ...subSchema,\n          ...passDownProps,\n          formData\n        },\n        materials\n      )\n    };\n  });\n\n  if ([\"array\", \"object\"].includes(schema.type)) {\n    // 传入 name 和 Field（如果重定义Field的话）及其配置信息（如 onChange 等）\n    basicProps.getSubField = (m) => {\n      const { field, props } = subItems[m.name] || {};\n\n      return subFieldGenerator({\n        ...field,\n        props: {\n          ...props,\n          name: m.name,\n          rootValue: m.rootValue\n        }\n      })(m);\n    };\n\n    if (schema.items) {\n      basicProps.extraButtons = extraButtons;\n    }\n  }\n\n  return basicProps;\n}\n\n/**\n *  schema + materials --> parser --> Field + props\n *  schema {\n *    propsSchema,\n *    data,\n *    name,\n *  }\n *  materials {\n *    generated,\n *    customized,\n *    mapping,\n *  }\n */\nconst schemaParser = (settings = {}, materials) => {\n  const { schema = {} } = settings;\n  return {\n    Field: getBasicField(schema, materials).Field,\n    props: getBasicProps(settings, materials)\n  };\n};\n\nexport default schemaParser;\n"]},"metadata":{},"sourceType":"module"}