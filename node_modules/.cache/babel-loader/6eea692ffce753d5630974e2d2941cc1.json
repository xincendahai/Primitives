{"ast":null,"code":"import { __assign, __extends } from 'tslib';\nimport React from 'react';\nimport normalizeWheel from 'normalize-wheel';\n/**\r\n * Compute the dimension of the crop area based on media size,\r\n * aspect ratio and optionally rotation\r\n */\n\nfunction getCropSize(mediaWidth, mediaHeight, containerWidth, containerHeight, aspect, rotation) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  var _a = translateSize(mediaWidth, mediaHeight, rotation),\n      width = _a.width,\n      height = _a.height;\n\n  var fittingWidth = Math.min(width, containerWidth);\n  var fittingHeight = Math.min(height, containerHeight);\n\n  if (fittingWidth > fittingHeight * aspect) {\n    return {\n      width: fittingHeight * aspect,\n      height: fittingHeight\n    };\n  }\n\n  return {\n    width: fittingWidth,\n    height: fittingWidth / aspect\n  };\n}\n/**\r\n * Ensure a new media position stays in the crop area.\r\n */\n\n\nfunction restrictPosition(position, mediaSize, cropSize, zoom, rotation) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  var _a = translateSize(mediaSize.width, mediaSize.height, rotation),\n      width = _a.width,\n      height = _a.height;\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom)\n  };\n}\n\nfunction restrictPositionCoord(position, mediaSize, cropSize, zoom) {\n  var maxPosition = mediaSize * zoom / 2 - cropSize / 2;\n  return Math.min(maxPosition, Math.max(position, -maxPosition));\n}\n\nfunction getDistanceBetweenPoints(pointA, pointB) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2));\n}\n\nfunction getRotationBetweenPoints(pointA, pointB) {\n  return Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI;\n}\n/**\r\n * Compute the output cropped area of the media in percentages and pixels.\r\n * x/y are the top-left coordinates on the src media\r\n */\n\n\nfunction computeCroppedArea(crop, mediaSize, cropSize, aspect, zoom, rotation, restrictPosition) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  if (restrictPosition === void 0) {\n    restrictPosition = true;\n  } // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n\n\n  var limitAreaFn = restrictPosition && rotation === 0 ? limitArea : noOp;\n  var croppedAreaPercentages = {\n    x: limitAreaFn(100, ((mediaSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaSize.width * 100),\n    y: limitAreaFn(100, ((mediaSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) / mediaSize.height * 100),\n    width: limitAreaFn(100, cropSize.width / mediaSize.width * 100 / zoom),\n    height: limitAreaFn(100, cropSize.height / mediaSize.height * 100 / zoom)\n  }; // we compute the pixels size naively\n\n  var widthInPixels = Math.round(limitAreaFn(mediaSize.naturalWidth, croppedAreaPercentages.width * mediaSize.naturalWidth / 100));\n  var heightInPixels = Math.round(limitAreaFn(mediaSize.naturalHeight, croppedAreaPercentages.height * mediaSize.naturalHeight / 100));\n  var isImgWiderThanHigh = mediaSize.naturalWidth >= mediaSize.naturalHeight * aspect; // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to iamge height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n\n  var sizePixels = isImgWiderThanHigh ? {\n    width: Math.round(heightInPixels * aspect),\n    height: heightInPixels\n  } : {\n    width: widthInPixels,\n    height: Math.round(widthInPixels / aspect)\n  };\n\n  var croppedAreaPixels = __assign(__assign({}, sizePixels), {\n    x: Math.round(limitAreaFn(mediaSize.naturalWidth - sizePixels.width, croppedAreaPercentages.x * mediaSize.naturalWidth / 100)),\n    y: Math.round(limitAreaFn(mediaSize.naturalHeight - sizePixels.height, croppedAreaPercentages.y * mediaSize.naturalHeight / 100))\n  });\n\n  return {\n    croppedAreaPercentages: croppedAreaPercentages,\n    croppedAreaPixels: croppedAreaPixels\n  };\n}\n/**\r\n * Ensure the returned value is between 0 and max\r\n */\n\n\nfunction limitArea(max, value) {\n  return Math.min(max, Math.max(0, value));\n}\n\nfunction noOp(_max, value) {\n  return value;\n}\n/**\r\n * Compute the crop and zoom from the croppedAreaPixels\r\n */\n\n\nfunction getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n  var mediaZoom = mediaSize.width / mediaSize.naturalWidth;\n\n  if (cropSize) {\n    var isHeightMaxSize_1 = cropSize.height > cropSize.width;\n    return isHeightMaxSize_1 ? cropSize.height / mediaZoom / croppedAreaPixels.height : cropSize.width / mediaZoom / croppedAreaPixels.width;\n  }\n\n  var aspect = croppedAreaPixels.width / croppedAreaPixels.height;\n  var isHeightMaxSize = mediaSize.naturalWidth >= mediaSize.naturalHeight * aspect;\n  return isHeightMaxSize ? mediaSize.naturalHeight / croppedAreaPixels.height : mediaSize.naturalWidth / croppedAreaPixels.width;\n}\n/**\r\n * Compute the crop and zoom from the croppedAreaPixels\r\n */\n\n\nfunction getInitialCropFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n  var mediaZoom = mediaSize.width / mediaSize.naturalWidth;\n  var zoom = getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize);\n  var cropZoom = mediaZoom * zoom;\n  var crop = {\n    x: ((mediaSize.naturalWidth - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y: ((mediaSize.naturalHeight - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) * cropZoom\n  };\n  return {\n    crop: crop,\n    zoom: zoom\n  };\n}\n/**\r\n * Return the point that is the center of point a and b\r\n */\n\n\nfunction getCenter(a, b) {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2\n  };\n}\n/**\r\n *\r\n * Returns an x,y point once rotated around xMid,yMid\r\n */\n\n\nfunction rotateAroundMidPoint(x, y, xMid, yMid, degrees) {\n  var cos = Math.cos;\n  var sin = Math.sin;\n  var radian = degrees * Math.PI / 180; // Convert to radians\n  // Subtract midpoints, so that midpoint is translated to origin\n  // and add it in the end again\n\n  var xr = (x - xMid) * cos(radian) - (y - yMid) * sin(radian) + xMid;\n  var yr = (x - xMid) * sin(radian) + (y - yMid) * cos(radian) + yMid;\n  return [xr, yr];\n}\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */\n\n\nfunction translateSize(width, height, rotation) {\n  var centerX = width / 2;\n  var centerY = height / 2;\n  var outerBounds = [rotateAroundMidPoint(0, 0, centerX, centerY, rotation), rotateAroundMidPoint(width, 0, centerX, centerY, rotation), rotateAroundMidPoint(width, height, centerX, centerY, rotation), rotateAroundMidPoint(0, height, centerX, centerY, rotation)];\n  var minX = Math.min.apply(Math, outerBounds.map(function (p) {\n    return p[0];\n  }));\n  var maxX = Math.max.apply(Math, outerBounds.map(function (p) {\n    return p[0];\n  }));\n  var minY = Math.min.apply(Math, outerBounds.map(function (p) {\n    return p[1];\n  }));\n  var maxY = Math.max.apply(Math, outerBounds.map(function (p) {\n    return p[1];\n  }));\n  return {\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n/**\r\n * Combine multiple class names into a single string.\r\n */\n\n\nfunction classNames() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.filter(function (value) {\n    if (typeof value === 'string' && value.length > 0) {\n      return true;\n    }\n\n    return false;\n  }).join(' ').trim();\n}\n\nvar css_248z = \".reactEasyCrop_Container {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  overflow: hidden;\\n  user-select: none;\\n  touch-action: none;\\n  cursor: move;\\n}\\n\\n.reactEasyCrop_Image,\\n.reactEasyCrop_Video {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: auto;\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  will-change: transform; /* this improves performances and prevent painting issues on iOS Chrome */\\n}\\n\\n.reactEasyCrop_CropArea {\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  box-sizing: border-box;\\n  box-shadow: 0 0 0 9999em;\\n  color: rgba(0, 0, 0, 0.5);\\n  overflow: hidden;\\n}\\n\\n.reactEasyCrop_CropAreaRound {\\n  border-radius: 50%;\\n}\\n\\n.reactEasyCrop_CropAreaGrid::before {\\n  content: ' ';\\n  box-sizing: border-box;\\n  position: absolute;\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  top: 0;\\n  bottom: 0;\\n  left: 33.33%;\\n  right: 33.33%;\\n  border-top: 0;\\n  border-bottom: 0;\\n}\\n\\n.reactEasyCrop_CropAreaGrid::after {\\n  content: ' ';\\n  box-sizing: border-box;\\n  position: absolute;\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  top: 33.33%;\\n  bottom: 33.33%;\\n  left: 0;\\n  right: 0;\\n  border-left: 0;\\n  border-right: 0;\\n}\\n\";\nvar MIN_ZOOM = 1;\nvar MAX_ZOOM = 3;\n\nvar Cropper =\n/** @class */\nfunction (_super) {\n  __extends(Cropper, _super);\n\n  function Cropper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.imageRef = null;\n    _this.videoRef = null;\n    _this.containerRef = null;\n    _this.styleRef = null;\n    _this.containerRect = null;\n    _this.mediaSize = {\n      width: 0,\n      height: 0,\n      naturalWidth: 0,\n      naturalHeight: 0\n    };\n    _this.dragStartPosition = {\n      x: 0,\n      y: 0\n    };\n    _this.dragStartCrop = {\n      x: 0,\n      y: 0\n    };\n    _this.lastPinchDistance = 0;\n    _this.lastPinchRotation = 0;\n    _this.rafDragTimeout = null;\n    _this.rafPinchTimeout = null;\n    _this.wheelTimer = null;\n    _this.state = {\n      cropSize: null,\n      hasWheelJustStarted: false\n    }; // this is to prevent Safari on iOS >= 10 to zoom the page\n\n    _this.preventZoomSafari = function (e) {\n      return e.preventDefault();\n    };\n\n    _this.cleanEvents = function () {\n      document.removeEventListener('mousemove', _this.onMouseMove);\n      document.removeEventListener('mouseup', _this.onDragStopped);\n      document.removeEventListener('touchmove', _this.onTouchMove);\n      document.removeEventListener('touchend', _this.onDragStopped);\n    };\n\n    _this.clearScrollEvent = function () {\n      if (_this.containerRef) _this.containerRef.removeEventListener('wheel', _this.onWheel);\n\n      if (_this.wheelTimer) {\n        clearTimeout(_this.wheelTimer);\n      }\n    };\n\n    _this.onMediaLoad = function () {\n      _this.computeSizes();\n\n      _this.emitCropData();\n\n      _this.setInitialCrop();\n\n      if (_this.props.onMediaLoaded) {\n        _this.props.onMediaLoaded(_this.mediaSize);\n      }\n    };\n\n    _this.setInitialCrop = function () {\n      var _a = _this.props,\n          initialCroppedAreaPixels = _a.initialCroppedAreaPixels,\n          cropSize = _a.cropSize;\n\n      if (!initialCroppedAreaPixels) {\n        return;\n      }\n\n      var _b = getInitialCropFromCroppedAreaPixels(initialCroppedAreaPixels, _this.mediaSize, cropSize),\n          crop = _b.crop,\n          zoom = _b.zoom;\n\n      _this.props.onCropChange(crop);\n\n      _this.props.onZoomChange && _this.props.onZoomChange(zoom);\n    };\n\n    _this.computeSizes = function () {\n      var _a, _b, _c, _d, _e, _f;\n\n      var mediaRef = _this.imageRef || _this.videoRef;\n\n      if (mediaRef && _this.containerRef) {\n        _this.containerRect = _this.containerRef.getBoundingClientRect();\n        _this.mediaSize = {\n          width: mediaRef.offsetWidth,\n          height: mediaRef.offsetHeight,\n          naturalWidth: ((_a = _this.imageRef) === null || _a === void 0 ? void 0 : _a.naturalWidth) || ((_b = _this.videoRef) === null || _b === void 0 ? void 0 : _b.videoWidth) || 0,\n          naturalHeight: ((_c = _this.imageRef) === null || _c === void 0 ? void 0 : _c.naturalHeight) || ((_d = _this.videoRef) === null || _d === void 0 ? void 0 : _d.videoHeight) || 0\n        };\n        var cropSize = _this.props.cropSize ? _this.props.cropSize : getCropSize(mediaRef.offsetWidth, mediaRef.offsetHeight, _this.containerRect.width, _this.containerRect.height, _this.props.aspect, _this.props.rotation);\n\n        if (((_e = _this.state.cropSize) === null || _e === void 0 ? void 0 : _e.height) !== cropSize.height || ((_f = _this.state.cropSize) === null || _f === void 0 ? void 0 : _f.width) !== cropSize.width) {\n          _this.props.onCropSizeChange && _this.props.onCropSizeChange(cropSize);\n        }\n\n        _this.setState({\n          cropSize: cropSize\n        }, _this.recomputeCropPosition);\n      }\n    };\n\n    _this.onMouseDown = function (e) {\n      e.preventDefault();\n      document.addEventListener('mousemove', _this.onMouseMove);\n      document.addEventListener('mouseup', _this.onDragStopped);\n\n      _this.onDragStart(Cropper.getMousePoint(e));\n    };\n\n    _this.onMouseMove = function (e) {\n      return _this.onDrag(Cropper.getMousePoint(e));\n    };\n\n    _this.onTouchStart = function (e) {\n      e.preventDefault();\n      document.addEventListener('touchmove', _this.onTouchMove, {\n        passive: false\n      }); // iOS 11 now defaults to passive: true\n\n      document.addEventListener('touchend', _this.onDragStopped);\n\n      if (e.touches.length === 2) {\n        _this.onPinchStart(e);\n      } else if (e.touches.length === 1) {\n        _this.onDragStart(Cropper.getTouchPoint(e.touches[0]));\n      }\n    };\n\n    _this.onTouchMove = function (e) {\n      // Prevent whole page from scrolling on iOS.\n      e.preventDefault();\n\n      if (e.touches.length === 2) {\n        _this.onPinchMove(e);\n      } else if (e.touches.length === 1) {\n        _this.onDrag(Cropper.getTouchPoint(e.touches[0]));\n      }\n    };\n\n    _this.onDragStart = function (_a) {\n      var _b, _c;\n\n      var x = _a.x,\n          y = _a.y;\n      _this.dragStartPosition = {\n        x: x,\n        y: y\n      };\n      _this.dragStartCrop = __assign({}, _this.props.crop);\n      (_c = (_b = _this.props).onInteractionStart) === null || _c === void 0 ? void 0 : _c.call(_b);\n    };\n\n    _this.onDrag = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n      if (_this.rafDragTimeout) window.cancelAnimationFrame(_this.rafDragTimeout);\n      _this.rafDragTimeout = window.requestAnimationFrame(function () {\n        if (!_this.state.cropSize) return;\n        if (x === undefined || y === undefined) return;\n        var offsetX = x - _this.dragStartPosition.x;\n        var offsetY = y - _this.dragStartPosition.y;\n        var requestedPosition = {\n          x: _this.dragStartCrop.x + offsetX,\n          y: _this.dragStartCrop.y + offsetY\n        };\n        var newPosition = _this.props.restrictPosition ? restrictPosition(requestedPosition, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : requestedPosition;\n\n        _this.props.onCropChange(newPosition);\n      });\n    };\n\n    _this.onDragStopped = function () {\n      var _a, _b;\n\n      _this.cleanEvents();\n\n      _this.emitCropData();\n\n      (_b = (_a = _this.props).onInteractionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n\n    _this.onWheel = function (e) {\n      e.preventDefault();\n      var point = Cropper.getMousePoint(e);\n      var pixelY = normalizeWheel(e).pixelY;\n      var newZoom = _this.props.zoom - pixelY * _this.props.zoomSpeed / 200;\n\n      _this.setNewZoom(newZoom, point);\n\n      if (!_this.state.hasWheelJustStarted) {\n        _this.setState({\n          hasWheelJustStarted: true\n        }, function () {\n          var _a, _b;\n\n          return (_b = (_a = _this.props).onInteractionStart) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n      }\n\n      if (_this.wheelTimer) {\n        clearTimeout(_this.wheelTimer);\n      }\n\n      _this.wheelTimer = window.setTimeout(function () {\n        return _this.setState({\n          hasWheelJustStarted: false\n        }, function () {\n          var _a, _b;\n\n          return (_b = (_a = _this.props).onInteractionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n      }, 250);\n    };\n\n    _this.getPointOnContainer = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n\n      if (!_this.containerRect) {\n        throw new Error('The Cropper is not mounted');\n      }\n\n      return {\n        x: _this.containerRect.width / 2 - (x - _this.containerRect.left),\n        y: _this.containerRect.height / 2 - (y - _this.containerRect.top)\n      };\n    };\n\n    _this.getPointOnMedia = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n      var _b = _this.props,\n          crop = _b.crop,\n          zoom = _b.zoom;\n      return {\n        x: (x + crop.x) / zoom,\n        y: (y + crop.y) / zoom\n      };\n    };\n\n    _this.setNewZoom = function (zoom, point) {\n      if (!_this.state.cropSize || !_this.props.onZoomChange) return;\n\n      var zoomPoint = _this.getPointOnContainer(point);\n\n      var zoomTarget = _this.getPointOnMedia(zoomPoint);\n\n      var newZoom = Math.min(_this.props.maxZoom, Math.max(zoom, _this.props.minZoom));\n      var requestedPosition = {\n        x: zoomTarget.x * newZoom - zoomPoint.x,\n        y: zoomTarget.y * newZoom - zoomPoint.y\n      };\n      var newPosition = _this.props.restrictPosition ? restrictPosition(requestedPosition, _this.mediaSize, _this.state.cropSize, newZoom, _this.props.rotation) : requestedPosition;\n\n      _this.props.onCropChange(newPosition);\n\n      _this.props.onZoomChange(newZoom);\n    };\n\n    _this.getCropData = function () {\n      if (!_this.state.cropSize) {\n        return null;\n      } // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ricardo-ch/react-easy-crop/issues/6)\n\n\n      var restrictedPosition = _this.props.restrictPosition ? restrictPosition(_this.props.crop, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : _this.props.crop;\n      return computeCroppedArea(restrictedPosition, _this.mediaSize, _this.state.cropSize, _this.getAspect(), _this.props.zoom, _this.props.rotation, _this.props.restrictPosition);\n    };\n\n    _this.emitCropData = function () {\n      var cropData = _this.getCropData();\n\n      if (!cropData) return;\n      var croppedAreaPercentages = cropData.croppedAreaPercentages,\n          croppedAreaPixels = cropData.croppedAreaPixels;\n\n      if (_this.props.onCropComplete) {\n        _this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels);\n      }\n\n      if (_this.props.onCropAreaChange) {\n        _this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels);\n      }\n    };\n\n    _this.emitCropAreaChange = function () {\n      var cropData = _this.getCropData();\n\n      if (!cropData) return;\n      var croppedAreaPercentages = cropData.croppedAreaPercentages,\n          croppedAreaPixels = cropData.croppedAreaPixels;\n\n      if (_this.props.onCropAreaChange) {\n        _this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels);\n      }\n    };\n\n    _this.recomputeCropPosition = function () {\n      if (!_this.state.cropSize) return;\n      var newPosition = _this.props.restrictPosition ? restrictPosition(_this.props.crop, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : _this.props.crop;\n\n      _this.props.onCropChange(newPosition);\n\n      _this.emitCropData();\n    };\n\n    return _this;\n  }\n\n  Cropper.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.computeSizes);\n\n    if (this.containerRef) {\n      this.props.zoomWithScroll && this.containerRef.addEventListener('wheel', this.onWheel, {\n        passive: false\n      });\n      this.containerRef.addEventListener('gesturestart', this.preventZoomSafari);\n      this.containerRef.addEventListener('gesturechange', this.preventZoomSafari);\n    }\n\n    if (!this.props.disableAutomaticStylesInjection) {\n      this.styleRef = document.createElement('style');\n      this.styleRef.setAttribute('type', 'text/css');\n      this.styleRef.innerHTML = css_248z;\n      document.head.appendChild(this.styleRef);\n    } // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n\n\n    if (this.imageRef && this.imageRef.complete) {\n      this.onMediaLoad();\n    }\n  };\n\n  Cropper.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.computeSizes);\n\n    if (this.containerRef) {\n      this.containerRef.removeEventListener('gesturestart', this.preventZoomSafari);\n      this.containerRef.removeEventListener('gesturechange', this.preventZoomSafari);\n    }\n\n    if (this.styleRef) {\n      this.styleRef.remove();\n    }\n\n    this.cleanEvents();\n    this.props.zoomWithScroll && this.clearScrollEvent();\n  };\n\n  Cropper.prototype.componentDidUpdate = function (prevProps) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    if (prevProps.rotation !== this.props.rotation) {\n      this.computeSizes();\n      this.recomputeCropPosition();\n    } else if (prevProps.aspect !== this.props.aspect) {\n      this.computeSizes();\n    } else if (prevProps.zoom !== this.props.zoom) {\n      this.recomputeCropPosition();\n    } else if (((_a = prevProps.cropSize) === null || _a === void 0 ? void 0 : _a.height) !== ((_b = this.props.cropSize) === null || _b === void 0 ? void 0 : _b.height) || ((_c = prevProps.cropSize) === null || _c === void 0 ? void 0 : _c.width) !== ((_d = this.props.cropSize) === null || _d === void 0 ? void 0 : _d.width)) {\n      this.computeSizes();\n    } else if (((_e = prevProps.crop) === null || _e === void 0 ? void 0 : _e.x) !== ((_f = this.props.crop) === null || _f === void 0 ? void 0 : _f.x) || ((_g = prevProps.crop) === null || _g === void 0 ? void 0 : _g.y) !== ((_h = this.props.crop) === null || _h === void 0 ? void 0 : _h.y)) {\n      this.emitCropAreaChange();\n    }\n\n    if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n      this.props.zoomWithScroll ? this.containerRef.addEventListener('wheel', this.onWheel, {\n        passive: false\n      }) : this.clearScrollEvent();\n    }\n  };\n\n  Cropper.prototype.getAspect = function () {\n    var _a = this.props,\n        cropSize = _a.cropSize,\n        aspect = _a.aspect;\n\n    if (cropSize) {\n      return cropSize.width / cropSize.height;\n    }\n\n    return aspect;\n  };\n\n  Cropper.prototype.onPinchStart = function (e) {\n    var pointA = Cropper.getTouchPoint(e.touches[0]);\n    var pointB = Cropper.getTouchPoint(e.touches[1]);\n    this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB);\n    this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB);\n    this.onDragStart(getCenter(pointA, pointB));\n  };\n\n  Cropper.prototype.onPinchMove = function (e) {\n    var _this = this;\n\n    var pointA = Cropper.getTouchPoint(e.touches[0]);\n    var pointB = Cropper.getTouchPoint(e.touches[1]);\n    var center = getCenter(pointA, pointB);\n    this.onDrag(center);\n    if (this.rafPinchTimeout) window.cancelAnimationFrame(this.rafPinchTimeout);\n    this.rafPinchTimeout = window.requestAnimationFrame(function () {\n      var distance = getDistanceBetweenPoints(pointA, pointB);\n      var newZoom = _this.props.zoom * (distance / _this.lastPinchDistance);\n\n      _this.setNewZoom(newZoom, center);\n\n      _this.lastPinchDistance = distance;\n      var rotation = getRotationBetweenPoints(pointA, pointB);\n      var newRotation = _this.props.rotation + (rotation - _this.lastPinchRotation);\n      _this.props.onRotationChange && _this.props.onRotationChange(newRotation);\n      _this.lastPinchRotation = rotation;\n    });\n  };\n\n  Cropper.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        image = _a.image,\n        video = _a.video,\n        mediaProps = _a.mediaProps,\n        transform = _a.transform,\n        _b = _a.crop,\n        x = _b.x,\n        y = _b.y,\n        rotation = _a.rotation,\n        zoom = _a.zoom,\n        cropShape = _a.cropShape,\n        showGrid = _a.showGrid,\n        _c = _a.style,\n        containerStyle = _c.containerStyle,\n        cropAreaStyle = _c.cropAreaStyle,\n        mediaStyle = _c.mediaStyle,\n        _d = _a.classes,\n        containerClassName = _d.containerClassName,\n        cropAreaClassName = _d.cropAreaClassName,\n        mediaClassName = _d.mediaClassName;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onMouseDown: this.onMouseDown,\n      onTouchStart: this.onTouchStart,\n      ref: function ref(el) {\n        return _this.containerRef = el;\n      },\n      \"data-testid\": \"container\",\n      style: containerStyle,\n      className: classNames('reactEasyCrop_Container', containerClassName)\n    }, image ? /*#__PURE__*/React.createElement(\"img\", __assign({\n      alt: \"\",\n      className: classNames('reactEasyCrop_Image', mediaClassName)\n    }, mediaProps, {\n      src: image,\n      ref: function ref(el) {\n        return _this.imageRef = el;\n      },\n      style: __assign(__assign({}, mediaStyle), {\n        transform: transform || \"translate(\" + x + \"px, \" + y + \"px) rotate(\" + rotation + \"deg) scale(\" + zoom + \")\"\n      }),\n      onLoad: this.onMediaLoad\n    })) : video && /*#__PURE__*/React.createElement(\"video\", __assign({\n      autoPlay: true,\n      loop: true,\n      muted: true,\n      className: classNames('reactEasyCrop_Video', mediaClassName)\n    }, mediaProps, {\n      src: video,\n      ref: function ref(el) {\n        return _this.videoRef = el;\n      },\n      onLoadedMetadata: this.onMediaLoad,\n      style: __assign(__assign({}, mediaStyle), {\n        transform: transform || \"translate(\" + x + \"px, \" + y + \"px) rotate(\" + rotation + \"deg) scale(\" + zoom + \")\"\n      }),\n      controls: false\n    })), this.state.cropSize && /*#__PURE__*/React.createElement(\"div\", {\n      style: __assign(__assign({}, cropAreaStyle), {\n        width: this.state.cropSize.width,\n        height: this.state.cropSize.height\n      }),\n      \"data-testid\": \"cropper\",\n      className: classNames('reactEasyCrop_CropArea', cropShape === 'round' && 'reactEasyCrop_CropAreaRound', showGrid && 'reactEasyCrop_CropAreaGrid', cropAreaClassName)\n    }));\n  };\n\n  Cropper.defaultProps = {\n    zoom: 1,\n    rotation: 0,\n    aspect: 4 / 3,\n    maxZoom: MAX_ZOOM,\n    minZoom: MIN_ZOOM,\n    cropShape: 'rect',\n    showGrid: true,\n    style: {},\n    classes: {},\n    mediaProps: {},\n    zoomSpeed: 1,\n    restrictPosition: true,\n    zoomWithScroll: true\n  };\n\n  Cropper.getMousePoint = function (e) {\n    return {\n      x: Number(e.clientX),\n      y: Number(e.clientY)\n    };\n  };\n\n  Cropper.getTouchPoint = function (touch) {\n    return {\n      x: Number(touch.clientX),\n      y: Number(touch.clientY)\n    };\n  };\n\n  return Cropper;\n}(React.Component);\n\nexport default Cropper;","map":{"version":3,"sources":["../src/helpers.ts","../src/index.tsx"],"names":["getCropSize","mediaWidth","mediaHeight","containerWidth","containerHeight","aspect","width","height","translateSize","fittingWidth","Math","fittingHeight","restrictPosition","position","mediaSize","cropSize","zoom","x","restrictPositionCoord","y","maxPosition","getDistanceBetweenPoints","pointA","pointB","getRotationBetweenPoints","computeCroppedArea","crop","limitAreaFn","rotation","croppedAreaPercentages","widthInPixels","heightInPixels","isImgWiderThanHigh","sizePixels","croppedAreaPixels","mediaZoom","isHeightMaxSize_1","isHeightMaxSize","getInitialCropFromCroppedAreaPixels","getZoomFromCroppedAreaPixels","cropZoom","getCenter","a","b","rotateAroundMidPoint","xMid","yMid","degrees","cos","sin","radian","xr","yr","centerX","centerY","outerBounds","minX","maxX","minY","maxY","classNames","value","MIN_ZOOM","MAX_ZOOM","__extends","Component","Cropper","maxZoom","minZoom","cropShape","showGrid","style","classes","mediaProps","zoomSpeed","zoomWithScroll","_this","naturalWidth","naturalHeight","hasWheelJustStarted","window","passive","document","prevProps","clearTimeout","initialCroppedAreaPixels","mediaRef","imageRef","videoRef","Number","e","touch","offsetX","offsetY","requestedPosition","newPosition","center","distance","newZoom","newRotation","point","normalizeWheel","pixelY","onInteractionStart","onInteractionEnd","zoomPoint","zoomTarget","restrictedPosition","cropData","image","video","transform","_b","_c","containerStyle","cropAreaStyle","mediaStyle","_d","containerClassName","cropAreaClassName","mediaClassName","onMouseDown","onTouchStart","ref","className","alt","src","onLoad","onMediaLoad","autoPlay","loop","muted","onLoadedMetadata","controls"],"mappings":";;;AAEA;;;;;SAIgBA,W,CACdC,U,EACAC,W,EACAC,c,EACAC,e,EACAC,M,EACA,Q,EAAA;AAAA,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;;;AAEM,MAAA,EAAA,GAAoBG,aAAa,CAAA,UAAA,EAAA,WAAA,EAAjC,QAAiC,CAAjC;AAAA,MAAEF,KAAK,GAAA,EAAA,CAAP,KAAA;AAAA,MAASC,MAAM,GAAA,EAAA,CAAf,MAAA;;AACN,MAAME,YAAY,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAArB,cAAqBA,CAArB;AACA,MAAMC,aAAa,GAAGD,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAtB,eAAsBA,CAAtB;;AAEA,MAAID,YAAY,GAAGE,aAAa,GAAhC,MAAA,EAA2C;AACzC,WAAO;AACLL,MAAAA,KAAK,EAAEK,aAAa,GADf,MAAA;AAELJ,MAAAA,MAAM,EAAEI;AAFH,KAAP;AAID;;AAED,SAAO;AACLL,IAAAA,KAAK,EADA,YAAA;AAELC,IAAAA,MAAM,EAAEE,YAAY,GAAGJ;AAFlB,GAAP;AAID;AAED;;;;;SAGgBO,gB,CACdC,Q,EACAC,S,EACAC,Q,EACAC,I,EACA,Q,EAAA;AAAA,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;;;AAEM,MAAA,EAAA,GAAoBR,aAAa,CAACM,SAAS,CAAV,KAAA,EAAkBA,SAAS,CAA3B,MAAA,EAAjC,QAAiC,CAAjC;AAAA,MAAER,KAAK,GAAA,EAAA,CAAP,KAAA;AAAA,MAASC,MAAM,GAAA,EAAA,CAAf,MAAA;;AAEN,SAAO;AACLU,IAAAA,CAAC,EAAEC,qBAAqB,CAACL,QAAQ,CAAT,CAAA,EAAA,KAAA,EAAoBE,QAAQ,CAA5B,KAAA,EADnB,IACmB,CADnB;AAELI,IAAAA,CAAC,EAAED,qBAAqB,CAACL,QAAQ,CAAT,CAAA,EAAA,MAAA,EAAqBE,QAAQ,CAA7B,MAAA,EAAA,IAAA;AAFnB,GAAP;AAID;;AAED,SAAA,qBAAA,CAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA;AAME,MAAMK,WAAW,GAAIN,SAAS,GAAV,IAACA,GAAD,CAACA,GAAwBC,QAAQ,GAArD,CAAA;AACA,SAAOL,IAAI,CAAJA,GAAAA,CAAAA,WAAAA,EAAsBA,IAAI,CAAJA,GAAAA,CAAAA,QAAAA,EAAmB,CAAhD,WAA6BA,CAAtBA,CAAP;AACD;;SAEeW,wB,CAAyBC,M,EAAeC,M,EAAAA;AACtD,SAAOb,IAAI,CAAJA,IAAAA,CAAUA,IAAI,CAAJA,GAAAA,CAASY,MAAM,CAANA,CAAAA,GAAWC,MAAM,CAA1Bb,CAAAA,EAAAA,CAAAA,IAAmCA,IAAI,CAAJA,GAAAA,CAASY,MAAM,CAANA,CAAAA,GAAWC,MAAM,CAA1Bb,CAAAA,EAApD,CAAoDA,CAA7CA,CAAP;AACD;;SAEec,wB,CAAyBF,M,EAAeC,M,EAAAA;AACtD,SAAQb,IAAI,CAAJA,KAAAA,CAAWa,MAAM,CAANA,CAAAA,GAAWD,MAAM,CAA5BZ,CAAAA,EAAgCa,MAAM,CAANA,CAAAA,GAAWD,MAAM,CAAjDZ,CAAAA,IAAD,GAACA,GAA8DA,IAAI,CAA1E,EAAA;AACD;AAED;;;;;;SAIgBe,kB,CACdC,I,EACAZ,S,EACAC,Q,EACAV,M,EACAW,I,EACA,Q,EACA,gB,EAAA;AADA,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;;;AACA,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,IAAA;GAAA,C;AAGA;;;AACA,MAAMW,WAAW,GAAGf,gBAAgB,IAAIgB,QAAQ,KAA5BhB,CAAAA,GAAAA,SAAAA,GAApB,IAAA;AACA,MAAMiB,sBAAsB,GAAG;AAC7BZ,IAAAA,CAAC,EAAEU,WAAW,CAAA,GAAA,EAEX,CAAC,CAACb,SAAS,CAATA,KAAAA,GAAkBC,QAAQ,CAARA,KAAAA,GAAnB,IAAA,IAAA,CAAA,GAAgDW,IAAI,CAAJA,CAAAA,GAAjD,IAAA,IAAkEZ,SAAS,CAA5E,KAAC,GAH0B,GACf,CADe;AAK7BK,IAAAA,CAAC,EAAEQ,WAAW,CAAA,GAAA,EAEX,CAAC,CAACb,SAAS,CAATA,MAAAA,GAAmBC,QAAQ,CAARA,MAAAA,GAApB,IAAA,IAAA,CAAA,GAAkDW,IAAI,CAAJA,CAAAA,GAAnD,IAAA,IAAoEZ,SAAS,CAA9E,MAAC,GAP0B,GAKf,CALe;AAS7BR,IAAAA,KAAK,EAAEqB,WAAW,CAAA,GAAA,EAAQZ,QAAQ,CAARA,KAAAA,GAAiBD,SAAS,CAA3B,KAACC,GAAF,GAAEA,GATG,IASX,CATW;AAU7BR,IAAAA,MAAM,EAAEoB,WAAW,CAAA,GAAA,EAAQZ,QAAQ,CAARA,MAAAA,GAAkBD,SAAS,CAA5B,MAACC,GAAF,GAAEA,GAAR,IAAA;AAVU,GAA/B,CALA,CAKA;;AAcA,MAAMe,aAAa,GAAGpB,IAAI,CAAJA,KAAAA,CACpBiB,WAAW,CACTb,SAAS,CADA,YAAA,EAERe,sBAAsB,CAAtBA,KAAAA,GAA+Bf,SAAS,CAAzC,YAACe,GAHL,GACa,CADSnB,CAAtB;AAMA,MAAMqB,cAAc,GAAGrB,IAAI,CAAJA,KAAAA,CACrBiB,WAAW,CACTb,SAAS,CADA,aAAA,EAERe,sBAAsB,CAAtBA,MAAAA,GAAgCf,SAAS,CAA1C,aAACe,GAHL,GACa,CADUnB,CAAvB;AAMA,MAAMsB,kBAAkB,GAAGlB,SAAS,CAATA,YAAAA,IAA0BA,SAAS,CAATA,aAAAA,GAArD,MAAA,CA/BA,CA+BA;AAGA;AACA;AACA;;AACA,MAAMmB,UAAU,GAAGD,kBAAkB,GACjC;AACE1B,IAAAA,KAAK,EAAEI,IAAI,CAAJA,KAAAA,CAAWqB,cAAc,GADlC,MACSrB,CADT;AAEEH,IAAAA,MAAM,EAAEwB;AAFV,GADiC,GAKjC;AACEzB,IAAAA,KAAK,EADP,aAAA;AAEEC,IAAAA,MAAM,EAAEG,IAAI,CAAJA,KAAAA,CAAWoB,aAAa,GAAxBpB,MAAAA;AAFV,GALJ;;AASA,MAAMwB,iBAAiB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAClBD,UADkB,CAAA,EAClBA;AACHhB,IAAAA,CAAC,EAAEP,IAAI,CAAJA,KAAAA,CACDiB,WAAW,CACTb,SAAS,CAATA,YAAAA,GAAyBmB,UAAU,CAD1B,KAAA,EAERJ,sBAAsB,CAAtBA,CAAAA,GAA2Bf,SAAS,CAArC,YAACe,GAHFnB,GACU,CADVA,CADAuB;AAOHd,IAAAA,CAAC,EAAET,IAAI,CAAJA,KAAAA,CACDiB,WAAW,CACTb,SAAS,CAATA,aAAAA,GAA0BmB,UAAU,CAD3B,MAAA,EAERJ,sBAAsB,CAAtBA,CAAAA,GAA2Bf,SAAS,CAArC,aAACe,GAHFnB,GACU,CADVA;AAPAuB,GADkB,CAAvB;;AAeA,SAAO;AAAEJ,IAAAA,sBAAsB,EAAxB,sBAAA;AAA0BK,IAAAA,iBAAiB,EAAA;AAA3C,GAAP;AACD;AAED;;;;;AAGA,SAAA,SAAA,CAAA,GAAA,EAAA,KAAA,EAAA;AACE,SAAOxB,IAAI,CAAJA,GAAAA,CAAAA,GAAAA,EAAcA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAArB,KAAqBA,CAAdA,CAAP;AACD;;AAED,SAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA;AACE,SAAA,KAAA;AACD;AAED;;;;;AAGA,SAAA,4BAAA,CAAA,iBAAA,EAAA,SAAA,EAAA,QAAA,EAAA;AAKE,MAAMyB,SAAS,GAAGrB,SAAS,CAATA,KAAAA,GAAkBA,SAAS,CAA7C,YAAA;;AAEA,MAAA,QAAA,EAAc;AACZ,QAAMsB,iBAAe,GAAGrB,QAAQ,CAARA,MAAAA,GAAkBA,QAAQ,CAAlD,KAAA;AACA,WAAOqB,iBAAe,GAClBrB,QAAQ,CAARA,MAAAA,GAAAA,SAAAA,GAA8BmB,iBAAiB,CAD7B,MAAA,GAElBnB,QAAQ,CAARA,KAAAA,GAAAA,SAAAA,GAA6BmB,iBAAiB,CAFlD,KAAA;AAGD;;AAED,MAAM7B,MAAM,GAAG6B,iBAAiB,CAAjBA,KAAAA,GAA0BA,iBAAiB,CAA1D,MAAA;AACA,MAAMG,eAAe,GAAGvB,SAAS,CAATA,YAAAA,IAA0BA,SAAS,CAATA,aAAAA,GAAlD,MAAA;AACA,SAAOuB,eAAe,GAClBvB,SAAS,CAATA,aAAAA,GAA0BoB,iBAAiB,CADzB,MAAA,GAElBpB,SAAS,CAATA,YAAAA,GAAyBoB,iBAAiB,CAF9C,KAAA;AAGD;AAED;;;;;SAGgBI,mC,CACdJ,iB,EACApB,S,EACAC,Q,EAAAA;AAEA,MAAMoB,SAAS,GAAGrB,SAAS,CAATA,KAAAA,GAAkBA,SAAS,CAA7C,YAAA;AAEA,MAAME,IAAI,GAAGuB,4BAA4B,CAAA,iBAAA,EAAA,SAAA,EAAzC,QAAyC,CAAzC;AAEA,MAAMC,QAAQ,GAAGL,SAAS,GAA1B,IAAA;AAEA,MAAMT,IAAI,GAAG;AACXT,IAAAA,CAAC,EAAE,CAAC,CAACH,SAAS,CAATA,YAAAA,GAAyBoB,iBAAiB,CAA3C,KAAA,IAAA,CAAA,GAAyDA,iBAAiB,CAA3E,CAAA,IADQ,QAAA;AAEXf,IAAAA,CAAC,EAAE,CAAC,CAACL,SAAS,CAATA,aAAAA,GAA0BoB,iBAAiB,CAA5C,MAAA,IAAA,CAAA,GAA2DA,iBAAiB,CAA7E,CAAA,IAAmFM;AAF3E,GAAb;AAIA,SAAO;AAAEd,IAAAA,IAAI,EAAN,IAAA;AAAQV,IAAAA,IAAI,EAAA;AAAZ,GAAP;AACD;AAED;;;;;SAGgByB,S,CAAUC,C,EAAUC,C,EAAAA;AAClC,SAAO;AACL1B,IAAAA,CAAC,EAAE,CAAC0B,CAAC,CAADA,CAAAA,GAAMD,CAAC,CAAR,CAAA,IADE,CAAA;AAELvB,IAAAA,CAAC,EAAE,CAACwB,CAAC,CAADA,CAAAA,GAAMD,CAAC,CAAR,CAAA,IAAc;AAFZ,GAAP;AAID;AAED;;;;;;SAIgBE,oB,CACd3B,C,EACAE,C,EACA0B,I,EACAC,I,EACAC,O,EAAAA;AAEA,MAAMC,GAAG,GAAGtC,IAAI,CAAhB,GAAA;AACA,MAAMuC,GAAG,GAAGvC,IAAI,CAAhB,GAAA;AACA,MAAMwC,MAAM,GAAIH,OAAO,GAAGrC,IAAI,CAAf,EAACqC,GAAhB,GAAA,CAJAA,CAIA;AACA;AACA;;AACA,MAAMI,EAAE,GAAG,CAAClC,CAAC,GAAF,IAAA,IAAa+B,GAAG,CAAhB,MAAgB,CAAhB,GAA2B,CAAC7B,CAAC,GAAF,IAAA,IAAa8B,GAAG,CAA3C,MAA2C,CAA3C,GAAX,IAAA;AACA,MAAMG,EAAE,GAAG,CAACnC,CAAC,GAAF,IAAA,IAAagC,GAAG,CAAhB,MAAgB,CAAhB,GAA2B,CAAC9B,CAAC,GAAF,IAAA,IAAa6B,GAAG,CAA3C,MAA2C,CAA3C,GAAX,IAAA;AAEA,SAAO,CAAA,EAAA,EAAP,EAAO,CAAP;AACD;AAED;;;;;SAGgBxC,a,CAAcF,K,EAAeC,M,EAAgBqB,Q,EAAAA;AAC3D,MAAMyB,OAAO,GAAG/C,KAAK,GAArB,CAAA;AACA,MAAMgD,OAAO,GAAG/C,MAAM,GAAtB,CAAA;AAEA,MAAMgD,WAAW,GAAG,CAClBX,oBAAoB,CAAA,CAAA,EAAA,CAAA,EAAA,OAAA,EAAA,OAAA,EADF,QACE,CADF,EAElBA,oBAAoB,CAAA,KAAA,EAAA,CAAA,EAAA,OAAA,EAAA,OAAA,EAFF,QAEE,CAFF,EAGlBA,oBAAoB,CAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAHF,QAGE,CAHF,EAIlBA,oBAAoB,CAAA,CAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAJtB,QAIsB,CAJF,CAApB;AAOA,MAAMY,IAAI,GAAG,IAAI,CAAJ,GAAA,CAAA,KAAA,CAAA,IAAA,EAAY,WAAW,CAAX,GAAA,CAAgB,UAAA,CAAA,EAAA;AAAK,WAAA,CAAC,CAAD,CAAC,CAAD;AAA9C,GAAyB,CAAZ,CAAb;AACA,MAAMC,IAAI,GAAG,IAAI,CAAJ,GAAA,CAAA,KAAA,CAAA,IAAA,EAAY,WAAW,CAAX,GAAA,CAAgB,UAAA,CAAA,EAAA;AAAK,WAAA,CAAC,CAAD,CAAC,CAAD;AAA9C,GAAyB,CAAZ,CAAb;AACA,MAAMC,IAAI,GAAG,IAAI,CAAJ,GAAA,CAAA,KAAA,CAAA,IAAA,EAAY,WAAW,CAAX,GAAA,CAAgB,UAAA,CAAA,EAAA;AAAK,WAAA,CAAC,CAAD,CAAC,CAAD;AAA9C,GAAyB,CAAZ,CAAb;AACA,MAAMC,IAAI,GAAG,IAAI,CAAJ,GAAA,CAAA,KAAA,CAAA,IAAA,EAAY,WAAW,CAAX,GAAA,CAAgB,UAAA,CAAA,EAAA;AAAK,WAAA,CAAC,CAAD,CAAC,CAAD;AAA9C,GAAyB,CAAZ,CAAb;AAEA,SAAO;AAAErD,IAAAA,KAAK,EAAEmD,IAAI,GAAb,IAAA;AAAsBlD,IAAAA,MAAM,EAAEoD,IAAI,GAAGD;AAArC,GAAP;AACD;AAED;;;;;SAGgBE,U,GAAAA;AAAW,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAA;AAAA,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACzB,SAAO,IAAI,CAAJ,MAAA,CACG,UAAA,KAAA,EAAA;AACN,QAAI,OAAA,KAAA,KAAA,QAAA,IAA6BC,KAAK,CAALA,MAAAA,GAAjC,CAAA,EAAmD;AACjD,aAAA,IAAA;AACD;;AAED,WAAA,KAAA;AANG,GAAA,EAAA,IAAA,CAAA,GAAA,EAAP,IAAO,EAAP;AAUD;;;AC9MD,IAAMC,QAAQ,GAAd,CAAA;AACA,IAAMC,QAAQ,GAAd,CAAA;;;;;AAEsBC,EAAAA,SAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CAAAA;;AAAtB,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAiBEY,IAAAA,KAAAA,CAAAA,QAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAAA,CAAAA,QAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAAA,CAAAA,YAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAAA,CAAAA,QAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAAA,CAAAA,aAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAAA,CAAAA,SAAAA,GAAuB;AAAEtE,MAAAA,KAAK,EAAP,CAAA;AAAYC,MAAAA,MAAM,EAAlB,CAAA;AAAuBsE,MAAAA,YAAY,EAAnC,CAAA;AAAwCC,MAAAA,aAAa,EAAE;AAAvD,KAAvBF;AACAA,IAAAA,KAAAA,CAAAA,iBAAAA,GAA2B;AAAE3D,MAAAA,CAAC,EAAH,CAAA;AAAQE,MAAAA,CAAC,EAAE;AAAX,KAA3ByD;AACAA,IAAAA,KAAAA,CAAAA,aAAAA,GAAuB;AAAE3D,MAAAA,CAAC,EAAH,CAAA;AAAQE,MAAAA,CAAC,EAAE;AAAX,KAAvByD;AACAA,IAAAA,KAAAA,CAAAA,iBAAAA,GAAAA,CAAAA;AACAA,IAAAA,KAAAA,CAAAA,iBAAAA,GAAAA,CAAAA;AACAA,IAAAA,KAAAA,CAAAA,cAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAAA,CAAAA,eAAAA,GAAAA,IAAAA;AACAA,IAAAA,KAAAA,CAAAA,UAAAA,GAAAA,IAAAA;AAEAA,IAAAA,KAAAA,CAAAA,KAAAA,GAAe;AACb7D,MAAAA,QAAQ,EADK,IAAA;AAEbgE,MAAAA,mBAAmB,EAAE;AAFR,KAAfH,CA/BF,CA+BEA;;AAqEAA,IAAAA,KAAAA,CAAAA,iBAAAA,GAAoB,UAAA,CAAA,EAAA;AAAc,aAAA,CAAC,CAAD,cAAA,EAAA;AAAlCA,KAAAA;;AAEAA,IAAAA,KAAAA,CAAAA,WAAAA,GAAc,YAAA;AACZM,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,WAAAA,EAA0CN,KAAI,CAA9CM,WAAAA;AACAA,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,SAAAA,EAAwCN,KAAI,CAA5CM,aAAAA;AACAA,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,WAAAA,EAA0CN,KAAI,CAA9CM,WAAAA;AACAA,MAAAA,QAAQ,CAARA,mBAAAA,CAAAA,UAAAA,EAAyCN,KAAI,CAA7CM,aAAAA;AAJFN,KAAAA;;AAOAA,IAAAA,KAAAA,CAAAA,gBAAAA,GAAmB,YAAA;AACjB,UAAIA,KAAI,CAAR,YAAA,EAAuBA,KAAI,CAAJA,YAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAA+CA,KAAI,CAAnDA,OAAAA;;AACvB,UAAIA,KAAI,CAAR,UAAA,EAAqB;AACnBQ,QAAAA,YAAY,CAACR,KAAI,CAAjBQ,UAAY,CAAZA;AACD;AAJHR,KAAAA;;AAOAA,IAAAA,KAAAA,CAAAA,WAAAA,GAAc,YAAA;AACZA,MAAAA,KAAI,CAAJA,YAAAA;;AACAA,MAAAA,KAAI,CAAJA,YAAAA;;AACAA,MAAAA,KAAI,CAAJA,cAAAA;;AAEA,UAAIA,KAAI,CAAJA,KAAAA,CAAJ,aAAA,EAA8B;AAC5BA,QAAAA,KAAI,CAAJA,KAAAA,CAAAA,aAAAA,CAAyBA,KAAI,CAA7BA,SAAAA;AACD;AAPHA,KAAAA;;AAUAA,IAAAA,KAAAA,CAAAA,cAAAA,GAAiB,YAAA;AACT,UAAA,EAAA,GAAyCA,KAAI,CAA7C,KAAA;AAAA,UAAES,wBAAwB,GAAA,EAAA,CAA1B,wBAAA;AAAA,UAA4BtE,QAAQ,GAAA,EAAA,CAApC,QAAA;;AAEN,UAAI,CAAJ,wBAAA,EAA+B;AAC7B;AACD;;AAEK,UAAA,EAAA,GAAiBuB,mCAAmC,CAAA,wBAAA,EAExDsC,KAAI,CAFoD,SAAA,EAApD,QAAoD,CAApD;AAAA,UAAElD,IAAI,GAAA,EAAA,CAAN,IAAA;AAAA,UAAQV,IAAI,GAAA,EAAA,CAAZ,IAAA;;AAKN4D,MAAAA,KAAI,CAAJA,KAAAA,CAAAA,YAAAA,CAAAA,IAAAA;;AACAA,MAAAA,KAAI,CAAJA,KAAAA,CAAAA,YAAAA,IAA2BA,KAAI,CAAJA,KAAAA,CAAAA,YAAAA,CAA3BA,IAA2BA,CAA3BA;AAbFA,KAAAA;;AAwBAA,IAAAA,KAAAA,CAAAA,YAAAA,GAAe,YAAA;;;AACb,UAAMU,QAAQ,GAAGV,KAAI,CAAJA,QAAAA,IAAiBA,KAAI,CAAtC,QAAA;;AACA,UAAIU,QAAQ,IAAIV,KAAI,CAApB,YAAA,EAAmC;AACjCA,QAAAA,KAAI,CAAJA,aAAAA,GAAqBA,KAAI,CAAJA,YAAAA,CAArBA,qBAAqBA,EAArBA;AAEAA,QAAAA,KAAI,CAAJA,SAAAA,GAAiB;AACftE,UAAAA,KAAK,EAAEgF,QAAQ,CADA,WAAA;AAEf/E,UAAAA,MAAM,EAAE+E,QAAQ,CAFD,YAAA;AAGfT,UAAAA,YAAY,EAAE,CAAA,CAAA,EAAA,GAAA,KAAI,CAACU,QAAL,MAAKA,IAAL,IAAKA,EAAAA,KAAAA,KAAAA,CAAL,GAAKA,KAAAA,CAAL,GAAKA,EAAAA,CAAL,YAAA,MAAA,CAAA,EAAA,GAA+BX,KAAI,CAACY,QAApC,MAAoCA,IAApC,IAAoCA,EAAAA,KAAAA,KAAAA,CAApC,GAAoCA,KAAAA,CAApC,GAAoCA,EAAAA,CAApC,UAAA,KAHC,CAAA;AAIfV,UAAAA,aAAa,EAAE,CAAA,CAAA,EAAA,GAAA,KAAI,CAACS,QAAL,MAAKA,IAAL,IAAKA,EAAAA,KAAAA,KAAAA,CAAL,GAAKA,KAAAA,CAAL,GAAKA,EAAAA,CAAL,aAAA,MAAA,CAAA,EAAA,GAAgCX,KAAI,CAACY,QAArC,MAAqCA,IAArC,IAAqCA,EAAAA,KAAAA,KAAAA,CAArC,GAAqCA,KAAAA,CAArC,GAAqCA,EAAAA,CAArC,WAAA,KAA8D;AAJ9D,SAAjBZ;AAMA,YAAM7D,QAAQ,GAAG6D,KAAI,CAAJA,KAAAA,CAAAA,QAAAA,GACbA,KAAI,CAAJA,KAAAA,CADaA,QAAAA,GAEb5E,WAAW,CACTsF,QAAQ,CADC,WAAA,EAETA,QAAQ,CAFC,YAAA,EAGTV,KAAI,CAAJA,aAAAA,CAHS,KAAA,EAITA,KAAI,CAAJA,aAAAA,CAJS,MAAA,EAKTA,KAAI,CAAJA,KAAAA,CALS,MAAA,EAMTA,KAAI,CAAJA,KAAAA,CARN,QAEe,CAFf;;AAWA,YACE,CAAA,CAAA,EAAA,GAAA,KAAI,CAAJ,KAAA,CAAW7D,QAAX,MAAWA,IAAX,IAAWA,EAAAA,KAAAA,KAAAA,CAAX,GAAWA,KAAAA,CAAX,GAAWA,EAAAA,CAAX,MAAA,MAAgCA,QAAQ,CAAxC,MAAA,IACA,CAAA,CAAA,EAAA,GAAA,KAAI,CAAJ,KAAA,CAAWA,QAAX,MAAWA,IAAX,IAAWA,EAAAA,KAAAA,KAAAA,CAAX,GAAWA,KAAAA,CAAX,GAAWA,EAAAA,CAAX,KAAA,MAA+BA,QAAQ,CAFzC,KAAA,EAGE;AACA6D,UAAAA,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,IAA+BA,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,CAA/BA,QAA+BA,CAA/BA;AACD;;AACDA,QAAAA,KAAI,CAAJA,QAAAA,CAAc;AAAE7D,UAAAA,QAAQ,EAAA;AAAV,SAAd6D,EAA4BA,KAAI,CAAhCA,qBAAAA;AACD;AA7BHA,KAAAA;;AA0CAA,IAAAA,KAAAA,CAAAA,WAAAA,GAAc,UAAA,CAAA,EAAA;AACZc,MAAAA,CAAC,CAADA,cAAAA;AACAR,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,WAAAA,EAAuCN,KAAI,CAA3CM,WAAAA;AACAA,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,SAAAA,EAAqCN,KAAI,CAAzCM,aAAAA;;AACAN,MAAAA,KAAI,CAAJA,WAAAA,CAAiBV,OAAO,CAAPA,aAAAA,CAAjBU,CAAiBV,CAAjBU;AAJFA,KAAAA;;AAOAA,IAAAA,KAAAA,CAAAA,WAAAA,GAAc,UAAA,CAAA,EAAA;AAAmB,aAAA,KAAI,CAAJ,MAAA,CAAYV,OAAO,CAAPA,aAAAA,CAAZ,CAAYA,CAAZ,CAAA;AAAjCU,KAAAA;;AAEAA,IAAAA,KAAAA,CAAAA,YAAAA,GAAe,UAAA,CAAA,EAAA;AACbc,MAAAA,CAAC,CAADA,cAAAA;AACAR,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,WAAAA,EAAuCN,KAAI,CAA3CM,WAAAA,EAAyD;AAAED,QAAAA,OAAO,EAAE;AAAX,OAAzDC,EAFa,CAEbA;;AACAA,MAAAA,QAAQ,CAARA,gBAAAA,CAAAA,UAAAA,EAAsCN,KAAI,CAA1CM,aAAAA;;AACA,UAAIQ,CAAC,CAADA,OAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAA4B;AAC1Bd,QAAAA,KAAI,CAAJA,YAAAA,CAAAA,CAAAA;AADF,OAAA,MAEO,IAAIc,CAAC,CAADA,OAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAA4B;AACjCd,QAAAA,KAAI,CAAJA,WAAAA,CAAiBV,OAAO,CAAPA,aAAAA,CAAsBwB,CAAC,CAADA,OAAAA,CAAvCd,CAAuCc,CAAtBxB,CAAjBU;AACD;AARHA,KAAAA;;AAWAA,IAAAA,KAAAA,CAAAA,WAAAA,GAAc,UAAA,CAAA,EAAA;AACZ;AACAc,MAAAA,CAAC,CAADA,cAAAA;;AACA,UAAIA,CAAC,CAADA,OAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAA4B;AAC1Bd,QAAAA,KAAI,CAAJA,WAAAA,CAAAA,CAAAA;AADF,OAAA,MAEO,IAAIc,CAAC,CAADA,OAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAA4B;AACjCd,QAAAA,KAAI,CAAJA,MAAAA,CAAYV,OAAO,CAAPA,aAAAA,CAAsBwB,CAAC,CAADA,OAAAA,CAAlCd,CAAkCc,CAAtBxB,CAAZU;AACD;AAPHA,KAAAA;;AAUAA,IAAAA,KAAAA,CAAAA,WAAAA,GAAc,UAAA,EAAA,EAAA;;;UAAG3D,CAAC,GAAA,EAAA,CAAA,C;UAAEE,CAAC,GAAA,EAAA,CAAA,C;AACnByD,MAAAA,KAAI,CAAJA,iBAAAA,GAAyB;AAAE3D,QAAAA,CAAC,EAAH,CAAA;AAAKE,QAAAA,CAAC,EAAA;AAAN,OAAzByD;AACAA,MAAAA,KAAI,CAAJA,aAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAA0BA,KAAI,CAAJA,KAAAA,CAA1BA,IAAAA,CAAAA;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAJ,KAAA,EAAA,kBAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AAHFA,KAAAA;;AAMAA,IAAAA,KAAAA,CAAAA,MAAAA,GAAS,UAAA,EAAA,EAAA;UAAG3D,CAAC,GAAA,EAAA,CAAA,C;UAAEE,CAAC,GAAA,EAAA,CAAA,C;AACd,UAAIyD,KAAI,CAAR,cAAA,EAAyBI,MAAM,CAANA,oBAAAA,CAA4BJ,KAAI,CAAhCI,cAAAA;AAEzBJ,MAAAA,KAAI,CAAJA,cAAAA,GAAsB,MAAM,CAAN,qBAAA,CAA6B,YAAA;AACjD,YAAI,CAACA,KAAI,CAAJA,KAAAA,CAAL,QAAA,EAA0B;AAC1B,YAAI3D,CAAC,KAADA,SAAAA,IAAmBE,CAAC,KAAxB,SAAA,EAAwC;AACxC,YAAMyE,OAAO,GAAG3E,CAAC,GAAG2D,KAAI,CAAJA,iBAAAA,CAApB,CAAA;AACA,YAAMiB,OAAO,GAAG1E,CAAC,GAAGyD,KAAI,CAAJA,iBAAAA,CAApB,CAAA;AACA,YAAMkB,iBAAiB,GAAG;AACxB7E,UAAAA,CAAC,EAAE2D,KAAI,CAAJA,aAAAA,CAAAA,CAAAA,GADqB,OAAA;AAExBzD,UAAAA,CAAC,EAAEyD,KAAI,CAAJA,aAAAA,CAAAA,CAAAA,GAAuBiB;AAFF,SAA1B;AAKA,YAAME,WAAW,GAAGnB,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,GAChBhE,gBAAgB,CAAA,iBAAA,EAEdgE,KAAI,CAFU,SAAA,EAGdA,KAAI,CAAJA,KAAAA,CAHc,QAAA,EAIdA,KAAI,CAAJA,KAAAA,CAJc,IAAA,EAKdA,KAAI,CAAJA,KAAAA,CANcA,QACA,CADAA,GAApB,iBAAA;;AASAA,QAAAA,KAAI,CAAJA,KAAAA,CAAAA,YAAAA,CAAAA,WAAAA;AAnBFA,OAAsB,CAAtBA;AAHFA,KAAAA;;AA0BAA,IAAAA,KAAAA,CAAAA,aAAAA,GAAgB,YAAA;;;AACdA,MAAAA,KAAI,CAAJA,WAAAA;;AACAA,MAAAA,KAAI,CAAJA,YAAAA;;AACA,OAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAI,CAAJ,KAAA,EAAA,gBAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AAHFA,KAAAA;;AAkCAA,IAAAA,KAAAA,CAAAA,OAAAA,GAAU,UAAA,CAAA,EAAA;AACRc,MAAAA,CAAC,CAADA,cAAAA;AACA,UAAMU,KAAK,GAAGlC,OAAO,CAAPA,aAAAA,CAAd,CAAcA,CAAd;AACQ,UAAA,MAAM,GAAKmC,cAAc,CAAdA,CAAc,CAAdA,CAAX,MAAA;AACR,UAAMH,OAAO,GAAGtB,KAAI,CAAJA,KAAAA,CAAAA,IAAAA,GAAmB0B,MAAM,GAAG1B,KAAI,CAAJA,KAAAA,CAAV,SAAC0B,GAAnC,GAAA;;AACA1B,MAAAA,KAAI,CAAJA,UAAAA,CAAAA,OAAAA,EAAAA,KAAAA;;AAEA,UAAI,CAACA,KAAI,CAAJA,KAAAA,CAAL,mBAAA,EAAqC;AACnCA,QAAAA,KAAI,CAAJA,QAAAA,CAAc;AAAEG,UAAAA,mBAAmB,EAAE;AAAvB,SAAdH,EAA6C,YAAA;;;uBAAM,CAAA,EAAA,GAAA,KAAI,CAAJ,KAAA,EAAW2B,kB,MAAAA,I,IAAAA,EAAAA,KAAAA,KAAAA,C,GAAAA,KAAAA,C,GAAAA,EAAAA,CAAAA,IAAAA,CAAAA,EAAAA,C;AAA9D3B,SAAAA;AACD;;AAED,UAAIA,KAAI,CAAR,UAAA,EAAqB;AACnBQ,QAAAA,YAAY,CAACR,KAAI,CAAjBQ,UAAY,CAAZA;AACD;;AACDR,MAAAA,KAAI,CAAJA,UAAAA,GAAkB,MAAM,CAAN,UAAA,CAChB,YAAA;AAAM,eAAA,KAAI,CAAJ,QAAA,CAAc;AAAEG,UAAAA,mBAAmB,EAAE;AAAvB,SAAd,EAA8C,YAAA;;;uBAAM,CAAA,EAAA,GAAA,KAAI,CAAJ,KAAA,EAAWyB,gB,MAAAA,I,IAAAA,EAAAA,KAAAA,KAAAA,C,GAAAA,KAAAA,C,GAAAA,EAAAA,CAAAA,IAAAA,CAAAA,EAAAA,C;AAA/D,SAAA,CAAA;AADU,OAAA,EAAlB5B,GAAkB,CAAlBA;AAdFA,KAAAA;;AAoBAA,IAAAA,KAAAA,CAAAA,mBAAAA,GAAsB,UAAA,EAAA,EAAA;UAAG3D,CAAC,GAAA,EAAA,CAAA,C;UAAEE,CAAC,GAAA,EAAA,CAAA,C;;AAC3B,UAAI,CAACyD,KAAI,CAAT,aAAA,EAAyB;AACvB,cAAM,IAAA,KAAA,CAAN,4BAAM,CAAN;AACD;;AACD,aAAO;AACL3D,QAAAA,CAAC,EAAE2D,KAAI,CAAJA,aAAAA,CAAAA,KAAAA,GAAAA,CAAAA,IAAgC3D,CAAC,GAAG2D,KAAI,CAAJA,aAAAA,CADlC,IACFA,CADE;AAELzD,QAAAA,CAAC,EAAEyD,KAAI,CAAJA,aAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAiCzD,CAAC,GAAGyD,KAAI,CAAJA,aAAAA,CAArCA,GAAAA;AAFE,OAAP;AAJFA,KAAAA;;AAUAA,IAAAA,KAAAA,CAAAA,eAAAA,GAAkB,UAAA,EAAA,EAAA;UAAG3D,CAAC,GAAA,EAAA,CAAA,C;UAAEE,CAAC,GAAA,EAAA,CAAA,C;AACjB,UAAA,EAAA,GAAiByD,KAAI,CAArB,KAAA;AAAA,UAAElD,IAAI,GAAA,EAAA,CAAN,IAAA;AAAA,UAAQV,IAAI,GAAA,EAAA,CAAZ,IAAA;AACN,aAAO;AACLC,QAAAA,CAAC,EAAE,CAACA,CAAC,GAAGS,IAAI,CAAT,CAAA,IADE,IAAA;AAELP,QAAAA,CAAC,EAAE,CAACA,CAAC,GAAGO,IAAI,CAAT,CAAA,IAAeV;AAFb,OAAP;AAFF4D,KAAAA;;AAQAA,IAAAA,KAAAA,CAAAA,UAAAA,GAAa,UAAA,IAAA,EAAA,KAAA,EAAA;AACX,UAAI,CAACA,KAAI,CAAJA,KAAAA,CAAD,QAAA,IAAwB,CAACA,KAAI,CAAJA,KAAAA,CAA7B,YAAA,EAAsD;;AAEtD,UAAM6B,SAAS,GAAG7B,KAAI,CAAJA,mBAAAA,CAAlB,KAAkBA,CAAlB;;AACA,UAAM8B,UAAU,GAAG9B,KAAI,CAAJA,eAAAA,CAAnB,SAAmBA,CAAnB;;AACA,UAAMsB,OAAO,GAAGxF,IAAI,CAAJA,GAAAA,CAASkE,KAAI,CAAJA,KAAAA,CAATlE,OAAAA,EAA6BA,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAekE,KAAI,CAAJA,KAAAA,CAA5D,OAA6ClE,CAA7BA,CAAhB;AACA,UAAMoF,iBAAiB,GAAG;AACxB7E,QAAAA,CAAC,EAAEyF,UAAU,CAAVA,CAAAA,GAAAA,OAAAA,GAAyBD,SAAS,CADb,CAAA;AAExBtF,QAAAA,CAAC,EAAEuF,UAAU,CAAVA,CAAAA,GAAAA,OAAAA,GAAyBD,SAAS,CAACtF;AAFd,OAA1B;AAIA,UAAM4E,WAAW,GAAGnB,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,GAChBhE,gBAAgB,CAAA,iBAAA,EAEdgE,KAAI,CAFU,SAAA,EAGdA,KAAI,CAAJA,KAAAA,CAHc,QAAA,EAAA,OAAA,EAKdA,KAAI,CAAJA,KAAAA,CANcA,QACA,CADAA,GAApB,iBAAA;;AAUAA,MAAAA,KAAI,CAAJA,KAAAA,CAAAA,YAAAA,CAAAA,WAAAA;;AACAA,MAAAA,KAAI,CAAJA,KAAAA,CAAAA,YAAAA,CAAAA,OAAAA;AArBFA,KAAAA;;AAwBAA,IAAAA,KAAAA,CAAAA,WAAAA,GAAc,YAAA;AACZ,UAAI,CAACA,KAAI,CAAJA,KAAAA,CAAL,QAAA,EAA0B;AACxB,eAAA,IAAA;AACD,OAHW,CAGX;;;AAGD,UAAM+B,kBAAkB,GAAG/B,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,GACvBhE,gBAAgB,CACdgE,KAAI,CAAJA,KAAAA,CADc,IAAA,EAEdA,KAAI,CAFU,SAAA,EAGdA,KAAI,CAAJA,KAAAA,CAHc,QAAA,EAIdA,KAAI,CAAJA,KAAAA,CAJc,IAAA,EAKdA,KAAI,CAAJA,KAAAA,CANqBA,QACP,CADOA,GAQvBA,KAAI,CAAJA,KAAAA,CARJ,IAAA;AASA,aAAOnD,kBAAkB,CAAA,kBAAA,EAEvBmD,KAAI,CAFmB,SAAA,EAGvBA,KAAI,CAAJA,KAAAA,CAHuB,QAAA,EAIvBA,KAAI,CAJmB,SAIvBA,EAJuB,EAKvBA,KAAI,CAAJA,KAAAA,CALuB,IAAA,EAMvBA,KAAI,CAAJA,KAAAA,CANuB,QAAA,EAOvBA,KAAI,CAAJA,KAAAA,CAPF,gBAAyB,CAAzB;AAfFA,KAAAA;;AA0BAA,IAAAA,KAAAA,CAAAA,YAAAA,GAAe,YAAA;AACb,UAAMgC,QAAQ,GAAGhC,KAAI,CAArB,WAAiBA,EAAjB;;AACA,UAAI,CAAJ,QAAA,EAAe;AAEP,UAAA,sBAAsB,GAAwBgC,QAAQ,CAAtD,sBAAA;AAAA,UAAwB1E,iBAAiB,GAAK0E,QAAQ,CAAtD,iBAAA;;AACR,UAAIhC,KAAI,CAAJA,KAAAA,CAAJ,cAAA,EAA+B;AAC7BA,QAAAA,KAAI,CAAJA,KAAAA,CAAAA,cAAAA,CAAAA,sBAAAA,EAAAA,iBAAAA;AACD;;AAED,UAAIA,KAAI,CAAJA,KAAAA,CAAJ,gBAAA,EAAiC;AAC/BA,QAAAA,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,CAAAA,sBAAAA,EAAAA,iBAAAA;AACD;AAXHA,KAAAA;;AAcAA,IAAAA,KAAAA,CAAAA,kBAAAA,GAAqB,YAAA;AACnB,UAAMgC,QAAQ,GAAGhC,KAAI,CAArB,WAAiBA,EAAjB;;AACA,UAAI,CAAJ,QAAA,EAAe;AAEP,UAAA,sBAAsB,GAAwBgC,QAAQ,CAAtD,sBAAA;AAAA,UAAwB1E,iBAAiB,GAAK0E,QAAQ,CAAtD,iBAAA;;AACR,UAAIhC,KAAI,CAAJA,KAAAA,CAAJ,gBAAA,EAAiC;AAC/BA,QAAAA,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,CAAAA,sBAAAA,EAAAA,iBAAAA;AACD;AAPHA,KAAAA;;AAUAA,IAAAA,KAAAA,CAAAA,qBAAAA,GAAwB,YAAA;AACtB,UAAI,CAACA,KAAI,CAAJA,KAAAA,CAAL,QAAA,EAA0B;AAE1B,UAAMmB,WAAW,GAAGnB,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,GAChBhE,gBAAgB,CACdgE,KAAI,CAAJA,KAAAA,CADc,IAAA,EAEdA,KAAI,CAFU,SAAA,EAGdA,KAAI,CAAJA,KAAAA,CAHc,QAAA,EAIdA,KAAI,CAAJA,KAAAA,CAJc,IAAA,EAKdA,KAAI,CAAJA,KAAAA,CANcA,QACA,CADAA,GAQhBA,KAAI,CAAJA,KAAAA,CARJ,IAAA;;AASAA,MAAAA,KAAI,CAAJA,KAAAA,CAAAA,YAAAA,CAAAA,WAAAA;;AACAA,MAAAA,KAAI,CAAJA,YAAAA;AAbFA,KAAAA;;;AA6FD;;AAzcCV,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,GAAAA,YAAAA;AACEc,IAAAA,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,EAAkC,KAAlCA,YAAAA;;AACA,QAAI,KAAJ,YAAA,EAAuB;AACrB,WAAA,KAAA,CAAA,cAAA,IACE,KAAA,YAAA,CAAA,gBAAA,CAAA,OAAA,EAA4C,KAA5C,OAAA,EAA0D;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA1D,CADF;AAEA,WAAA,YAAA,CAAA,gBAAA,CAAA,cAAA,EAAmD,KAAnD,iBAAA;AACA,WAAA,YAAA,CAAA,gBAAA,CAAA,eAAA,EAAoD,KAApD,iBAAA;AACD;;AAED,QAAI,CAAC,KAAA,KAAA,CAAL,+BAAA,EAAiD;AAC/C,WAAA,QAAA,GAAgBC,QAAQ,CAARA,aAAAA,CAAhB,OAAgBA,CAAhB;AACA,WAAA,QAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA;AACA,WAAA,QAAA,CAAA,SAAA,GAAA,QAAA;AACAA,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAA0B,KAA1BA,QAAAA;AACD,KAdHhB,CAcG;;;AAGD,QAAI,KAAA,QAAA,IAAiB,KAAA,QAAA,CAArB,QAAA,EAA6C;AAC3C,WAAA,WAAA;AACD;AAnBHA,GAAAA;;AAsBAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,oBAAAA,GAAAA,YAAAA;AACEc,IAAAA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAqC,KAArCA,YAAAA;;AACA,QAAI,KAAJ,YAAA,EAAuB;AACrB,WAAA,YAAA,CAAA,mBAAA,CAAA,cAAA,EAAsD,KAAtD,iBAAA;AACA,WAAA,YAAA,CAAA,mBAAA,CAAA,eAAA,EAAuD,KAAvD,iBAAA;AACD;;AAED,QAAI,KAAJ,QAAA,EAAmB;AACjB,WAAA,QAAA,CAAA,MAAA;AACD;;AAED,SAAA,WAAA;AACA,SAAA,KAAA,CAAA,cAAA,IAA6B,KAA7B,gBAA6B,EAA7B;AAZFd,GAAAA;;AAeAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,kBAAAA,GAAAA,UAAAA,SAAAA,EAAAA;;;AACE,QAAIiB,SAAS,CAATA,QAAAA,KAAuB,KAAA,KAAA,CAA3B,QAAA,EAAgD;AAC9C,WAAA,YAAA;AACA,WAAA,qBAAA;AAFF,KAAA,MAGO,IAAIA,SAAS,CAATA,MAAAA,KAAqB,KAAA,KAAA,CAAzB,MAAA,EAA4C;AACjD,WAAA,YAAA;AADK,KAAA,MAEA,IAAIA,SAAS,CAATA,IAAAA,KAAmB,KAAA,KAAA,CAAvB,IAAA,EAAwC;AAC7C,WAAA,qBAAA;AADK,KAAA,MAEA,IACL,CAAA,CAAA,EAAA,GAAA,SAAS,CAACpE,QAAV,MAAUA,IAAV,IAAUA,EAAAA,KAAAA,KAAAA,CAAV,GAAUA,KAAAA,CAAV,GAAUA,EAAAA,CAAV,MAAA,OAAA,CAAA,EAAA,GAA+B,KAAA,KAAA,CAAWA,QAA1C,MAA0CA,IAA1C,IAA0CA,EAAAA,KAAAA,KAAAA,CAA1C,GAA0CA,KAAAA,CAA1C,GAA0CA,EAAAA,CAA1C,MAAA,KACA,CAAA,CAAA,EAAA,GAAA,SAAS,CAACA,QAAV,MAAUA,IAAV,IAAUA,EAAAA,KAAAA,KAAAA,CAAV,GAAUA,KAAAA,CAAV,GAAUA,EAAAA,CAAV,KAAA,OAAA,CAAA,EAAA,GAA8B,KAAA,KAAA,CAAWA,QAAzC,MAAyCA,IAAzC,IAAyCA,EAAAA,KAAAA,KAAAA,CAAzC,GAAyCA,KAAAA,CAAzC,GAAyCA,EAAAA,CAFpC,KAEL,CAFK,EAGL;AACA,WAAA,YAAA;AAJK,KAAA,MAKA,IACL,CAAA,CAAA,EAAA,GAAA,SAAS,CAACW,IAAV,MAAUA,IAAV,IAAUA,EAAAA,KAAAA,KAAAA,CAAV,GAAUA,KAAAA,CAAV,GAAUA,EAAAA,CAAV,CAAA,OAAA,CAAA,EAAA,GAAsB,KAAA,KAAA,CAAWA,IAAjC,MAAiCA,IAAjC,IAAiCA,EAAAA,KAAAA,KAAAA,CAAjC,GAAiCA,KAAAA,CAAjC,GAAiCA,EAAAA,CAAjC,CAAA,KACA,CAAA,CAAA,EAAA,GAAA,SAAS,CAACA,IAAV,MAAUA,IAAV,IAAUA,EAAAA,KAAAA,KAAAA,CAAV,GAAUA,KAAAA,CAAV,GAAUA,EAAAA,CAAV,CAAA,OAAA,CAAA,EAAA,GAAsB,KAAA,KAAA,CAAWA,IAAjC,MAAiCA,IAAjC,IAAiCA,EAAAA,KAAAA,KAAAA,CAAjC,GAAiCA,KAAAA,CAAjC,GAAiCA,EAAAA,CAF5B,CAEL,CAFK,EAGL;AACA,WAAA,kBAAA;AACD;;AACD,QAAIyD,SAAS,CAATA,cAAAA,KAA6B,KAAA,KAAA,CAA7BA,cAAAA,IAA0D,KAA9D,YAAA,EAAiF;AAC/E,WAAA,KAAA,CAAA,cAAA,GACI,KAAA,YAAA,CAAA,gBAAA,CAAA,OAAA,EAA4C,KAA5C,OAAA,EAA0D;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAA1D,CADJ,GAEI,KAFJ,gBAEI,EAFJ;AAGD;AAvBHf,GAAAA;;AAqEAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,SAAAA,GAAAA,YAAAA;AACQ,QAAA,EAAA,GAAuB,KAAvB,KAAA;AAAA,QAAEnD,QAAQ,GAAA,EAAA,CAAV,QAAA;AAAA,QAAYV,MAAM,GAAA,EAAA,CAAlB,MAAA;;AACN,QAAA,QAAA,EAAc;AACZ,aAAOU,QAAQ,CAARA,KAAAA,GAAiBA,QAAQ,CAAhC,MAAA;AACD;;AACD,WAAA,MAAA;AALFmD,GAAAA;;AAsHAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,YAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AACE,QAAM5C,MAAM,GAAG4C,OAAO,CAAPA,aAAAA,CAAsBwB,CAAC,CAADA,OAAAA,CAArC,CAAqCA,CAAtBxB,CAAf;AACA,QAAM3C,MAAM,GAAG2C,OAAO,CAAPA,aAAAA,CAAsBwB,CAAC,CAADA,OAAAA,CAArC,CAAqCA,CAAtBxB,CAAf;AACA,SAAA,iBAAA,GAAyB7C,wBAAwB,CAAA,MAAA,EAAjD,MAAiD,CAAjD;AACA,SAAA,iBAAA,GAAyBG,wBAAwB,CAAA,MAAA,EAAjD,MAAiD,CAAjD;AACA,SAAA,WAAA,CAAiBiB,SAAS,CAAA,MAAA,EAA1B,MAA0B,CAA1B;AALFyB,GAAAA;;AAQAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,QAAAA,KAAAA,GAAAA,IAAAA;;AACE,QAAM5C,MAAM,GAAG4C,OAAO,CAAPA,aAAAA,CAAsBwB,CAAC,CAADA,OAAAA,CAArC,CAAqCA,CAAtBxB,CAAf;AACA,QAAM3C,MAAM,GAAG2C,OAAO,CAAPA,aAAAA,CAAsBwB,CAAC,CAADA,OAAAA,CAArC,CAAqCA,CAAtBxB,CAAf;AACA,QAAM8B,MAAM,GAAGvD,SAAS,CAAA,MAAA,EAAxB,MAAwB,CAAxB;AACA,SAAA,MAAA,CAAA,MAAA;AAEA,QAAI,KAAJ,eAAA,EAA0BuC,MAAM,CAANA,oBAAAA,CAA4B,KAA5BA,eAAAA;AAC1B,SAAA,eAAA,GAAuB,MAAM,CAAN,qBAAA,CAA6B,YAAA;AAClD,UAAMiB,QAAQ,GAAG5E,wBAAwB,CAAA,MAAA,EAAzC,MAAyC,CAAzC;AACA,UAAM6E,OAAO,GAAGtB,KAAI,CAAJA,KAAAA,CAAAA,IAAAA,IAAmBqB,QAAQ,GAAGrB,KAAI,CAAlD,iBAAgBA,CAAhB;;AACAA,MAAAA,KAAI,CAAJA,UAAAA,CAAAA,OAAAA,EAAAA,MAAAA;;AACAA,MAAAA,KAAI,CAAJA,iBAAAA,GAAAA,QAAAA;AAEA,UAAMhD,QAAQ,GAAGJ,wBAAwB,CAAA,MAAA,EAAzC,MAAyC,CAAzC;AACA,UAAM2E,WAAW,GAAGvB,KAAI,CAAJA,KAAAA,CAAAA,QAAAA,IAAuBhD,QAAQ,GAAGgD,KAAI,CAA1D,iBAAoBA,CAApB;AACAA,MAAAA,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,IAA+BA,KAAI,CAAJA,KAAAA,CAAAA,gBAAAA,CAA/BA,WAA+BA,CAA/BA;AACAA,MAAAA,KAAI,CAAJA,iBAAAA,GAAAA,QAAAA;AATF,KAAuB,CAAvB;AAPFV,GAAAA;;AAoJAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,MAAAA,GAAAA,YAAAA;AAAAA,QAAAA,KAAAA,GAAAA,IAAAA;;AACQ,QAAA,EAAA,GAYF,KAZE,KAAA;AAAA,QACJ2C,KAAK,GAAA,EAAA,CADD,KAAA;AAAA,QAEJC,KAAK,GAAA,EAAA,CAFD,KAAA;AAAA,QAGJrC,UAAU,GAAA,EAAA,CAHN,UAAA;AAAA,QAIJsC,SAAS,GAAA,EAAA,CAJL,SAAA;AAAA,QAKJC,EAAAA,GAAAA,EAAAA,CALI,IAAA;AAAA,QAKI/F,CAAC,GAAA,EAAA,CALL,CAAA;AAAA,QAKOE,CAAC,GAAA,EAAA,CALR,CAAA;AAAA,QAMJS,QAAQ,GAAA,EAAA,CANJ,QAAA;AAAA,QAOJZ,IAAI,GAAA,EAAA,CAPA,IAAA;AAAA,QAQJqD,SAAS,GAAA,EAAA,CARL,SAAA;AAAA,QASJC,QAAQ,GAAA,EAAA,CATJ,QAAA;AAAA,QAUJ2C,EAAAA,GAAAA,EAAAA,CAVI,KAAA;AAAA,QAUKC,cAAc,GAAA,EAAA,CAVnB,cAAA;AAAA,QAUqBC,aAAa,GAAA,EAAA,CAVlC,aAAA;AAAA,QAUoCC,UAAU,GAAA,EAAA,CAV9C,UAAA;AAAA,QAWJC,EAAAA,GAAAA,EAAAA,CAXI,OAAA;AAAA,QAWOC,kBAAkB,GAAA,EAAA,CAXzB,kBAAA;AAAA,QAW2BC,iBAAiB,GAAA,EAAA,CAX5C,iBAAA;AAAA,QAW8CC,cAAc,GAAA,EAAA,CAX5D,cAAA;AAcN,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEC,MAAAA,WAAW,EAAE,KAAKA,WADpB;AAEEC,MAAAA,YAAY,EAAE,KAAKA,YAFrB;AAGEC,MAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,EAAA,EAAA;AAAQ,eAAC/C,KAAI,CAAJA,YAAAA,GAAD,EAAA;AAAwB,OAHvC;qBAIc,WAJd;AAKEL,MAAAA,KAAK,EAAE2C,cALT;AAMEU,MAAAA,SAAS,EAAEhE,UAAU,CAAA,yBAAA,EAAA,kBAAA;AANvB,KAAA,EAQGiD,KAAK,GAAA,aACJ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACEgB,MAAAA,GAAG,EAAC,EADN;AAEED,MAAAA,SAAS,EAAEhE,UAAU,CAAA,qBAAA,EAAA,cAAA;AAFvB,KAAA,EAGOa,UAHP,EAGOA;AACLqD,MAAAA,GAAG,EAAEjB,KADApC;AAELkD,MAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,EAAA,EAAA;AAA0B,eAAC/C,KAAI,CAAJA,QAAAA,GAAD,EAAA;AAAoB,OAF9CH;AAGLF,MAAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA6C,UADA,CAAA,EACAA;AACHL,QAAAA,SAAS,EACPA,SAAS,IAAI,eAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,aAAA,GAAA,QAAA,GAAA,aAAA,GAAA,IAAA,GAAA;AAFZK,OADA,CAHA3C;AAQLsD,MAAAA,MAAM,EAAE,KAAKC;AARRvD,KAHP,CAAA,CADI,GAeJqC,KAAK,IAAA,aACH,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AACEmB,MAAAA,QAAQ,EAAA,IADV;AAEEC,MAAAA,IAAI,EAAA,IAFN;AAGEC,MAAAA,KAAK,EAAE,IAHT;AAIEP,MAAAA,SAAS,EAAEhE,UAAU,CAAA,qBAAA,EAAA,cAAA;AAJvB,KAAA,EAKMa,UALN,EAKMA;AACJqD,MAAAA,GAAG,EAAEhB,KADDrC;AAEJkD,MAAAA,GAAG,EAAE,SAAA,GAAA,CAAA,EAAA,EAAA;AAA0B,eAAC/C,KAAI,CAAJA,QAAAA,GAAD,EAAA;AAAoB,OAF/CH;AAGJ2D,MAAAA,gBAAgB,EAAE,KAAKJ,WAHnBvD;AAIJF,MAAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA6C,UADA,CAAA,EACAA;AACHL,QAAAA,SAAS,EACPA,SAAS,IAAI,eAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,aAAA,GAAA,QAAA,GAAA,aAAA,GAAA,IAAA,GAAA;AAFZK,OADA,CAJD3C;AASJ4D,MAAAA,QAAQ,EAAE;AATN5D,KALN,CAAA,CAxBN,EA0CG,KAAA,KAAA,CAAA,QAAA,IAAA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEF,MAAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA4C,aADA,CAAA,EACAA;AACH7G,QAAAA,KAAK,EAAE,KAAA,KAAA,CAAA,QAAA,CAAoBA,KADxB6G;AAEH5G,QAAAA,MAAM,EAAE,KAAA,KAAA,CAAA,QAAA,CAAoBA;AAFzB4G,OADA,CADP;qBAMc,SANd;AAOES,MAAAA,SAAS,EAAEhE,UAAU,CAAA,wBAAA,EAEnBS,SAAS,KAATA,OAAAA,IAFmB,6BAAA,EAGnBC,QAAQ,IAHW,4BAAA,EAAA,iBAAA;AAPvB,KAAA,CA3CJ,CADF;AAfFJ,GAAAA;;AA/ZOA,EAAAA,OAAAA,CAAAA,YAAAA,GAAe;AACpBlD,IAAAA,IAAI,EADgB,CAAA;AAEpBY,IAAAA,QAAQ,EAFY,CAAA;AAGpBvB,IAAAA,MAAM,EAAE,IAHY,CAAA;AAIpB8D,IAAAA,OAAO,EAJa,QAAA;AAKpBC,IAAAA,OAAO,EALa,QAAA;AAMpBC,IAAAA,SAAS,EANW,MAAA;AAOpBC,IAAAA,QAAQ,EAPY,IAAA;AAQpBC,IAAAA,KAAK,EARe,EAAA;AASpBC,IAAAA,OAAO,EATa,EAAA;AAUpBC,IAAAA,UAAU,EAVU,EAAA;AAWpBC,IAAAA,SAAS,EAXW,CAAA;AAYpB9D,IAAAA,gBAAgB,EAZI,IAAA;AAapB+D,IAAAA,cAAc,EAAE;AAbI,GAAfT;;AAqLAA,EAAAA,OAAAA,CAAAA,aAAAA,GAAgB,UAAA,CAAA,EAAA;AAAsC,WAAC;AAC5DjD,MAAAA,CAAC,EAAEwE,MAAM,CAACC,CAAC,CADiD,OACnD,CADmD;AAE5DvE,MAAAA,CAAC,EAAEsE,MAAM,CAACC,CAAC,CAAF,OAAA;AAFmD,KAAD;AAAtDxB,GAAAA;;AAKAA,EAAAA,OAAAA,CAAAA,aAAAA,GAAgB,UAAA,KAAA,EAAA;AAAgC,WAAC;AACtDjD,MAAAA,CAAC,EAAEwE,MAAM,CAACE,KAAK,CADuC,OAC7C,CAD6C;AAEtDxE,MAAAA,CAAC,EAAEsE,MAAM,CAACE,KAAK,CAAN,OAAA;AAF6C,KAAD;AAAhDzB,GAAAA;;AAkTT,SAAA,OAAA;AA7eA,C,CAAsBF,KAAK,CAACC,S","sourcesContent":["import { Area, MediaSize, Point, Size } from './types'\n\n/**\n * Compute the dimension of the crop area based on media size,\n * aspect ratio and optionally rotation\n */\nexport function getCropSize(\n  mediaWidth: number,\n  mediaHeight: number,\n  containerWidth: number,\n  containerHeight: number,\n  aspect: number,\n  rotation = 0\n): Size {\n  const { width, height } = translateSize(mediaWidth, mediaHeight, rotation)\n  const fittingWidth = Math.min(width, containerWidth)\n  const fittingHeight = Math.min(height, containerHeight)\n\n  if (fittingWidth > fittingHeight * aspect) {\n    return {\n      width: fittingHeight * aspect,\n      height: fittingHeight,\n    }\n  }\n\n  return {\n    width: fittingWidth,\n    height: fittingWidth / aspect,\n  }\n}\n\n/**\n * Ensure a new media position stays in the crop area.\n */\nexport function restrictPosition(\n  position: Point,\n  mediaSize: Size,\n  cropSize: Size,\n  zoom: number,\n  rotation = 0\n): Point {\n  const { width, height } = translateSize(mediaSize.width, mediaSize.height, rotation)\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom),\n  }\n}\n\nfunction restrictPositionCoord(\n  position: number,\n  mediaSize: number,\n  cropSize: number,\n  zoom: number\n): number {\n  const maxPosition = (mediaSize * zoom) / 2 - cropSize / 2\n  return Math.min(maxPosition, Math.max(position, -maxPosition))\n}\n\nexport function getDistanceBetweenPoints(pointA: Point, pointB: Point) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2))\n}\n\nexport function getRotationBetweenPoints(pointA: Point, pointB: Point) {\n  return (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI\n}\n\n/**\n * Compute the output cropped area of the media in percentages and pixels.\n * x/y are the top-left coordinates on the src media\n */\nexport function computeCroppedArea(\n  crop: Point,\n  mediaSize: MediaSize,\n  cropSize: Size,\n  aspect: number,\n  zoom: number,\n  rotation = 0,\n  restrictPosition = true\n): { croppedAreaPercentages: Area; croppedAreaPixels: Area } {\n  // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n  const limitAreaFn = restrictPosition && rotation === 0 ? limitArea : noOp\n  const croppedAreaPercentages = {\n    x: limitAreaFn(\n      100,\n      (((mediaSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaSize.width) * 100\n    ),\n    y: limitAreaFn(\n      100,\n      (((mediaSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) / mediaSize.height) * 100\n    ),\n    width: limitAreaFn(100, ((cropSize.width / mediaSize.width) * 100) / zoom),\n    height: limitAreaFn(100, ((cropSize.height / mediaSize.height) * 100) / zoom),\n  }\n\n  // we compute the pixels size naively\n  const widthInPixels = Math.round(\n    limitAreaFn(\n      mediaSize.naturalWidth,\n      (croppedAreaPercentages.width * mediaSize.naturalWidth) / 100\n    )\n  )\n  const heightInPixels = Math.round(\n    limitAreaFn(\n      mediaSize.naturalHeight,\n      (croppedAreaPercentages.height * mediaSize.naturalHeight) / 100\n    )\n  )\n  const isImgWiderThanHigh = mediaSize.naturalWidth >= mediaSize.naturalHeight * aspect\n\n  // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to iamge height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n  const sizePixels = isImgWiderThanHigh\n    ? {\n        width: Math.round(heightInPixels * aspect),\n        height: heightInPixels,\n      }\n    : {\n        width: widthInPixels,\n        height: Math.round(widthInPixels / aspect),\n      }\n  const croppedAreaPixels = {\n    ...sizePixels,\n    x: Math.round(\n      limitAreaFn(\n        mediaSize.naturalWidth - sizePixels.width,\n        (croppedAreaPercentages.x * mediaSize.naturalWidth) / 100\n      )\n    ),\n    y: Math.round(\n      limitAreaFn(\n        mediaSize.naturalHeight - sizePixels.height,\n        (croppedAreaPercentages.y * mediaSize.naturalHeight) / 100\n      )\n    ),\n  }\n  return { croppedAreaPercentages, croppedAreaPixels }\n}\n\n/**\n * Ensure the returned value is between 0 and max\n */\nfunction limitArea(max: number, value: number): number {\n  return Math.min(max, Math.max(0, value))\n}\n\nfunction noOp(_max: number, value: number) {\n  return value\n}\n\n/**\n * Compute the crop and zoom from the croppedAreaPixels\n */\nfunction getZoomFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  cropSize?: Size\n): number {\n  const mediaZoom = mediaSize.width / mediaSize.naturalWidth\n\n  if (cropSize) {\n    const isHeightMaxSize = cropSize.height > cropSize.width\n    return isHeightMaxSize\n      ? cropSize.height / mediaZoom / croppedAreaPixels.height\n      : cropSize.width / mediaZoom / croppedAreaPixels.width\n  }\n\n  const aspect = croppedAreaPixels.width / croppedAreaPixels.height\n  const isHeightMaxSize = mediaSize.naturalWidth >= mediaSize.naturalHeight * aspect\n  return isHeightMaxSize\n    ? mediaSize.naturalHeight / croppedAreaPixels.height\n    : mediaSize.naturalWidth / croppedAreaPixels.width\n}\n\n/**\n * Compute the crop and zoom from the croppedAreaPixels\n */\nexport function getInitialCropFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  cropSize?: Size\n): { crop: Point; zoom: number } {\n  const mediaZoom = mediaSize.width / mediaSize.naturalWidth\n\n  const zoom = getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize)\n\n  const cropZoom = mediaZoom * zoom\n\n  const crop = {\n    x: ((mediaSize.naturalWidth - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y: ((mediaSize.naturalHeight - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) * cropZoom,\n  }\n  return { crop, zoom }\n}\n\n/**\n * Return the point that is the center of point a and b\n */\nexport function getCenter(a: Point, b: Point): Point {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2,\n  }\n}\n\n/**\n *\n * Returns an x,y point once rotated around xMid,yMid\n */\nexport function rotateAroundMidPoint(\n  x: number,\n  y: number,\n  xMid: number,\n  yMid: number,\n  degrees: number\n): [number, number] {\n  const cos = Math.cos\n  const sin = Math.sin\n  const radian = (degrees * Math.PI) / 180 // Convert to radians\n  // Subtract midpoints, so that midpoint is translated to origin\n  // and add it in the end again\n  const xr = (x - xMid) * cos(radian) - (y - yMid) * sin(radian) + xMid\n  const yr = (x - xMid) * sin(radian) + (y - yMid) * cos(radian) + yMid\n\n  return [xr, yr]\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function translateSize(width: number, height: number, rotation: number): Size {\n  const centerX = width / 2\n  const centerY = height / 2\n\n  const outerBounds = [\n    rotateAroundMidPoint(0, 0, centerX, centerY, rotation),\n    rotateAroundMidPoint(width, 0, centerX, centerY, rotation),\n    rotateAroundMidPoint(width, height, centerX, centerY, rotation),\n    rotateAroundMidPoint(0, height, centerX, centerY, rotation),\n  ]\n\n  const minX = Math.min(...outerBounds.map(p => p[0]))\n  const maxX = Math.max(...outerBounds.map(p => p[0]))\n  const minY = Math.min(...outerBounds.map(p => p[1]))\n  const maxY = Math.max(...outerBounds.map(p => p[1]))\n\n  return { width: maxX - minX, height: maxY - minY }\n}\n\n/**\n * Combine multiple class names into a single string.\n */\nexport function classNames(...args: (boolean | string | number | undefined | void | null)[]) {\n  return args\n    .filter(value => {\n      if (typeof value === 'string' && value.length > 0) {\n        return true\n      }\n\n      return false\n    })\n    .join(' ')\n    .trim()\n}\n","import React from 'react'\nimport normalizeWheel from 'normalize-wheel'\nimport { Area, MediaSize, Point, Size } from './types'\nimport {\n  getCropSize,\n  restrictPosition,\n  getDistanceBetweenPoints,\n  getRotationBetweenPoints,\n  computeCroppedArea,\n  getCenter,\n  getInitialCropFromCroppedAreaPixels,\n  classNames,\n} from './helpers'\nimport cssStyles from './styles.css'\n\nexport type CropperProps = {\n  image?: string\n  video?: string\n  transform?: string\n  crop: Point\n  zoom: number\n  rotation: number\n  aspect: number\n  minZoom: number\n  maxZoom: number\n  cropShape: 'rect' | 'round'\n  cropSize?: Size\n  showGrid?: boolean\n  zoomSpeed: number\n  zoomWithScroll?: boolean\n  onCropChange: (location: Point) => void\n  onZoomChange?: (zoom: number) => void\n  onRotationChange?: (rotation: number) => void\n  onCropComplete?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropAreaChange?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropSizeChange?: (cropSize: Size) => void\n  onInteractionStart?: () => void\n  onInteractionEnd?: () => void\n  onMediaLoaded?: (mediaSize: MediaSize) => void\n  style: {\n    containerStyle?: React.CSSProperties\n    mediaStyle?: React.CSSProperties\n    cropAreaStyle?: React.CSSProperties\n  }\n  classes: {\n    containerClassName?: string\n    mediaClassName?: string\n    cropAreaClassName?: string\n  }\n  restrictPosition: boolean\n  initialCroppedAreaPixels?: Area\n  mediaProps: React.ImgHTMLAttributes<HTMLElement> | React.VideoHTMLAttributes<HTMLElement>\n  disableAutomaticStylesInjection?: boolean\n}\n\ntype State = {\n  cropSize: Size | null\n  hasWheelJustStarted: boolean\n}\n\nconst MIN_ZOOM = 1\nconst MAX_ZOOM = 3\n\nclass Cropper extends React.Component<CropperProps, State> {\n  static defaultProps = {\n    zoom: 1,\n    rotation: 0,\n    aspect: 4 / 3,\n    maxZoom: MAX_ZOOM,\n    minZoom: MIN_ZOOM,\n    cropShape: 'rect',\n    showGrid: true,\n    style: {},\n    classes: {},\n    mediaProps: {},\n    zoomSpeed: 1,\n    restrictPosition: true,\n    zoomWithScroll: true,\n  }\n\n  imageRef: HTMLImageElement | null = null\n  videoRef: HTMLVideoElement | null = null\n  containerRef: HTMLDivElement | null = null\n  styleRef: HTMLStyleElement | null = null\n  containerRect: DOMRect | null = null\n  mediaSize: MediaSize = { width: 0, height: 0, naturalWidth: 0, naturalHeight: 0 }\n  dragStartPosition: Point = { x: 0, y: 0 }\n  dragStartCrop: Point = { x: 0, y: 0 }\n  lastPinchDistance = 0\n  lastPinchRotation = 0\n  rafDragTimeout: number | null = null\n  rafPinchTimeout: number | null = null\n  wheelTimer: number | null = null\n\n  state: State = {\n    cropSize: null,\n    hasWheelJustStarted: false,\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.computeSizes)\n    if (this.containerRef) {\n      this.props.zoomWithScroll &&\n        this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n      this.containerRef.addEventListener('gesturestart', this.preventZoomSafari)\n      this.containerRef.addEventListener('gesturechange', this.preventZoomSafari)\n    }\n\n    if (!this.props.disableAutomaticStylesInjection) {\n      this.styleRef = document.createElement('style')\n      this.styleRef.setAttribute('type', 'text/css')\n      this.styleRef.innerHTML = cssStyles\n      document.head.appendChild(this.styleRef)\n    }\n\n    // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n    if (this.imageRef && this.imageRef.complete) {\n      this.onMediaLoad()\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.computeSizes)\n    if (this.containerRef) {\n      this.containerRef.removeEventListener('gesturestart', this.preventZoomSafari)\n      this.containerRef.removeEventListener('gesturechange', this.preventZoomSafari)\n    }\n\n    if (this.styleRef) {\n      this.styleRef.remove()\n    }\n\n    this.cleanEvents()\n    this.props.zoomWithScroll && this.clearScrollEvent()\n  }\n\n  componentDidUpdate(prevProps: CropperProps) {\n    if (prevProps.rotation !== this.props.rotation) {\n      this.computeSizes()\n      this.recomputeCropPosition()\n    } else if (prevProps.aspect !== this.props.aspect) {\n      this.computeSizes()\n    } else if (prevProps.zoom !== this.props.zoom) {\n      this.recomputeCropPosition()\n    } else if (\n      prevProps.cropSize?.height !== this.props.cropSize?.height ||\n      prevProps.cropSize?.width !== this.props.cropSize?.width\n    ) {\n      this.computeSizes()\n    } else if (\n      prevProps.crop?.x !== this.props.crop?.x ||\n      prevProps.crop?.y !== this.props.crop?.y\n    ) {\n      this.emitCropAreaChange()\n    }\n    if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n      this.props.zoomWithScroll\n        ? this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n        : this.clearScrollEvent()\n    }\n  }\n\n  // this is to prevent Safari on iOS >= 10 to zoom the page\n  preventZoomSafari = (e: Event) => e.preventDefault()\n\n  cleanEvents = () => {\n    document.removeEventListener('mousemove', this.onMouseMove)\n    document.removeEventListener('mouseup', this.onDragStopped)\n    document.removeEventListener('touchmove', this.onTouchMove)\n    document.removeEventListener('touchend', this.onDragStopped)\n  }\n\n  clearScrollEvent = () => {\n    if (this.containerRef) this.containerRef.removeEventListener('wheel', this.onWheel)\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n  }\n\n  onMediaLoad = () => {\n    this.computeSizes()\n    this.emitCropData()\n    this.setInitialCrop()\n\n    if (this.props.onMediaLoaded) {\n      this.props.onMediaLoaded(this.mediaSize)\n    }\n  }\n\n  setInitialCrop = () => {\n    const { initialCroppedAreaPixels, cropSize } = this.props\n\n    if (!initialCroppedAreaPixels) {\n      return\n    }\n\n    const { crop, zoom } = getInitialCropFromCroppedAreaPixels(\n      initialCroppedAreaPixels,\n      this.mediaSize,\n      cropSize\n    )\n    this.props.onCropChange(crop)\n    this.props.onZoomChange && this.props.onZoomChange(zoom)\n  }\n\n  getAspect() {\n    const { cropSize, aspect } = this.props\n    if (cropSize) {\n      return cropSize.width / cropSize.height\n    }\n    return aspect\n  }\n\n  computeSizes = () => {\n    const mediaRef = this.imageRef || this.videoRef\n    if (mediaRef && this.containerRef) {\n      this.containerRect = this.containerRef.getBoundingClientRect()\n\n      this.mediaSize = {\n        width: mediaRef.offsetWidth,\n        height: mediaRef.offsetHeight,\n        naturalWidth: this.imageRef?.naturalWidth || this.videoRef?.videoWidth || 0,\n        naturalHeight: this.imageRef?.naturalHeight || this.videoRef?.videoHeight || 0,\n      }\n      const cropSize = this.props.cropSize\n        ? this.props.cropSize\n        : getCropSize(\n            mediaRef.offsetWidth,\n            mediaRef.offsetHeight,\n            this.containerRect.width,\n            this.containerRect.height,\n            this.props.aspect,\n            this.props.rotation\n          )\n\n      if (\n        this.state.cropSize?.height !== cropSize.height ||\n        this.state.cropSize?.width !== cropSize.width\n      ) {\n        this.props.onCropSizeChange && this.props.onCropSizeChange(cropSize)\n      }\n      this.setState({ cropSize }, this.recomputeCropPosition)\n    }\n  }\n\n  static getMousePoint = (e: MouseEvent | React.MouseEvent) => ({\n    x: Number(e.clientX),\n    y: Number(e.clientY),\n  })\n\n  static getTouchPoint = (touch: Touch | React.Touch) => ({\n    x: Number(touch.clientX),\n    y: Number(touch.clientY),\n  })\n\n  onMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.preventDefault()\n    document.addEventListener('mousemove', this.onMouseMove)\n    document.addEventListener('mouseup', this.onDragStopped)\n    this.onDragStart(Cropper.getMousePoint(e))\n  }\n\n  onMouseMove = (e: MouseEvent) => this.onDrag(Cropper.getMousePoint(e))\n\n  onTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    document.addEventListener('touchmove', this.onTouchMove, { passive: false }) // iOS 11 now defaults to passive: true\n    document.addEventListener('touchend', this.onDragStopped)\n    if (e.touches.length === 2) {\n      this.onPinchStart(e)\n    } else if (e.touches.length === 1) {\n      this.onDragStart(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onTouchMove = (e: TouchEvent) => {\n    // Prevent whole page from scrolling on iOS.\n    e.preventDefault()\n    if (e.touches.length === 2) {\n      this.onPinchMove(e)\n    } else if (e.touches.length === 1) {\n      this.onDrag(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onDragStart = ({ x, y }: Point) => {\n    this.dragStartPosition = { x, y }\n    this.dragStartCrop = { ...this.props.crop }\n    this.props.onInteractionStart?.()\n  }\n\n  onDrag = ({ x, y }: Point) => {\n    if (this.rafDragTimeout) window.cancelAnimationFrame(this.rafDragTimeout)\n\n    this.rafDragTimeout = window.requestAnimationFrame(() => {\n      if (!this.state.cropSize) return\n      if (x === undefined || y === undefined) return\n      const offsetX = x - this.dragStartPosition.x\n      const offsetY = y - this.dragStartPosition.y\n      const requestedPosition = {\n        x: this.dragStartCrop.x + offsetX,\n        y: this.dragStartCrop.y + offsetY,\n      }\n\n      const newPosition = this.props.restrictPosition\n        ? restrictPosition(\n            requestedPosition,\n            this.mediaSize,\n            this.state.cropSize,\n            this.props.zoom,\n            this.props.rotation\n          )\n        : requestedPosition\n      this.props.onCropChange(newPosition)\n    })\n  }\n\n  onDragStopped = () => {\n    this.cleanEvents()\n    this.emitCropData()\n    this.props.onInteractionEnd?.()\n  }\n\n  onPinchStart(e: React.TouchEvent<HTMLDivElement>) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB)\n    this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB)\n    this.onDragStart(getCenter(pointA, pointB))\n  }\n\n  onPinchMove(e: TouchEvent) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    const center = getCenter(pointA, pointB)\n    this.onDrag(center)\n\n    if (this.rafPinchTimeout) window.cancelAnimationFrame(this.rafPinchTimeout)\n    this.rafPinchTimeout = window.requestAnimationFrame(() => {\n      const distance = getDistanceBetweenPoints(pointA, pointB)\n      const newZoom = this.props.zoom * (distance / this.lastPinchDistance)\n      this.setNewZoom(newZoom, center)\n      this.lastPinchDistance = distance\n\n      const rotation = getRotationBetweenPoints(pointA, pointB)\n      const newRotation = this.props.rotation + (rotation - this.lastPinchRotation)\n      this.props.onRotationChange && this.props.onRotationChange(newRotation)\n      this.lastPinchRotation = rotation\n    })\n  }\n\n  onWheel = (e: WheelEvent) => {\n    e.preventDefault()\n    const point = Cropper.getMousePoint(e)\n    const { pixelY } = normalizeWheel(e)\n    const newZoom = this.props.zoom - (pixelY * this.props.zoomSpeed) / 200\n    this.setNewZoom(newZoom, point)\n\n    if (!this.state.hasWheelJustStarted) {\n      this.setState({ hasWheelJustStarted: true }, () => this.props.onInteractionStart?.())\n    }\n\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n    this.wheelTimer = window.setTimeout(\n      () => this.setState({ hasWheelJustStarted: false }, () => this.props.onInteractionEnd?.()),\n      250\n    )\n  }\n\n  getPointOnContainer = ({ x, y }: Point) => {\n    if (!this.containerRect) {\n      throw new Error('The Cropper is not mounted')\n    }\n    return {\n      x: this.containerRect.width / 2 - (x - this.containerRect.left),\n      y: this.containerRect.height / 2 - (y - this.containerRect.top),\n    }\n  }\n\n  getPointOnMedia = ({ x, y }: Point) => {\n    const { crop, zoom } = this.props\n    return {\n      x: (x + crop.x) / zoom,\n      y: (y + crop.y) / zoom,\n    }\n  }\n\n  setNewZoom = (zoom: number, point: Point) => {\n    if (!this.state.cropSize || !this.props.onZoomChange) return\n\n    const zoomPoint = this.getPointOnContainer(point)\n    const zoomTarget = this.getPointOnMedia(zoomPoint)\n    const newZoom = Math.min(this.props.maxZoom, Math.max(zoom, this.props.minZoom))\n    const requestedPosition = {\n      x: zoomTarget.x * newZoom - zoomPoint.x,\n      y: zoomTarget.y * newZoom - zoomPoint.y,\n    }\n    const newPosition = this.props.restrictPosition\n      ? restrictPosition(\n          requestedPosition,\n          this.mediaSize,\n          this.state.cropSize,\n          newZoom,\n          this.props.rotation\n        )\n      : requestedPosition\n\n    this.props.onCropChange(newPosition)\n    this.props.onZoomChange(newZoom)\n  }\n\n  getCropData = () => {\n    if (!this.state.cropSize) {\n      return null\n    }\n\n    // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ricardo-ch/react-easy-crop/issues/6)\n    const restrictedPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n    return computeCroppedArea(\n      restrictedPosition,\n      this.mediaSize,\n      this.state.cropSize,\n      this.getAspect(),\n      this.props.zoom,\n      this.props.rotation,\n      this.props.restrictPosition\n    )\n  }\n\n  emitCropData = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropComplete) {\n      this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels)\n    }\n\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  emitCropAreaChange = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  recomputeCropPosition = () => {\n    if (!this.state.cropSize) return\n\n    const newPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n    this.props.onCropChange(newPosition)\n    this.emitCropData()\n  }\n\n  render() {\n    const {\n      image,\n      video,\n      mediaProps,\n      transform,\n      crop: { x, y },\n      rotation,\n      zoom,\n      cropShape,\n      showGrid,\n      style: { containerStyle, cropAreaStyle, mediaStyle },\n      classes: { containerClassName, cropAreaClassName, mediaClassName },\n    } = this.props\n\n    return (\n      <div\n        onMouseDown={this.onMouseDown}\n        onTouchStart={this.onTouchStart}\n        ref={(el) => (this.containerRef = el)}\n        data-testid=\"container\"\n        style={containerStyle}\n        className={classNames('reactEasyCrop_Container', containerClassName)}\n      >\n        {image ? (\n          <img\n            alt=\"\"\n            className={classNames('reactEasyCrop_Image', mediaClassName)}\n            {...(mediaProps as React.ImgHTMLAttributes<HTMLElement>)}\n            src={image}\n            ref={(el: HTMLImageElement) => (this.imageRef = el)}\n            style={{\n              ...mediaStyle,\n              transform:\n                transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n            }}\n            onLoad={this.onMediaLoad}\n          />\n        ) : (\n          video && (\n            <video\n              autoPlay\n              loop\n              muted={true}\n              className={classNames('reactEasyCrop_Video', mediaClassName)}\n              {...mediaProps}\n              src={video}\n              ref={(el: HTMLVideoElement) => (this.videoRef = el)}\n              onLoadedMetadata={this.onMediaLoad}\n              style={{\n                ...mediaStyle,\n                transform:\n                  transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n              }}\n              controls={false}\n            />\n          )\n        )}\n        {this.state.cropSize && (\n          <div\n            style={{\n              ...cropAreaStyle,\n              width: this.state.cropSize.width,\n              height: this.state.cropSize.height,\n            }}\n            data-testid=\"cropper\"\n            className={classNames(\n              'reactEasyCrop_CropArea',\n              cropShape === 'round' && 'reactEasyCrop_CropAreaRound',\n              showGrid && 'reactEasyCrop_CropAreaGrid',\n              cropAreaClassName\n            )}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Cropper\n"]},"metadata":{},"sourceType":"module"}