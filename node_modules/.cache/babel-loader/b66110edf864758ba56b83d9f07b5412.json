{"ast":null,"code":"import \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\n\n/**\n * request 网络请求工具，创建axios实例对象\n * send cookies when cross-domain requests\n */\nimport axios from \"axios\";\nimport { isEmpty } from \"~utils/helper\";\nvar codeMessage = {\n  200: \"服务器成功返回请求的数据。\",\n  201: \"新建或修改数据成功。\",\n  202: \"一个请求已经进入后台排队（异步任务）。\",\n  204: \"删除数据成功。\",\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作。\",\n  401: \"用户没有权限（令牌、用户名、密码错误）。\",\n  403: \"用户得到授权，但是访问是被禁止的。\",\n  404: \"发出的请求针对的是不存在的记录，服务器没有进行操作。\",\n  406: \"请求的格式不可得。\",\n  410: \"请求的资源被永久删除，且不会再得到的。\",\n  422: \"当创建一个对象时，发生一个验证错误。\",\n  500: \"服务器发生错误，请检查服务器。\",\n  502: \"网关错误。\",\n  503: \"服务不可用，服务器暂时过载或维护。\",\n  504: \"网关超时。\"\n};\n/**\n * 异常处理程序\n */\n\nvar errorHandler = function errorHandler(error) {\n  var response = error.response;\n\n  if (response && response.status) {\n    var errorText = codeMessage[response.status] || response.statusText;\n    var status = response.status,\n        url = response.url;\n\n    _notification.error({\n      message: \"\\u8BF7\\u6C42\\u9519\\u8BEF \".concat(status, \": \").concat(url),\n      description: errorText\n    });\n  }\n\n  if (!response) {\n    _notification.error({\n      description: \"您的网络发生异常，无法连接服务器\",\n      message: \"网络异常\"\n    });\n  }\n\n  throw error;\n};\n\nvar fetch = axios.create({\n  baseURL: process.env.REACT_APP_API,\n  timeout: 15 * 1000,\n  // 请求超时时间\n  retry: 4,\n  retryDelay: 500,\n  withCredentials: true\n}); // request拦截器 请求处理\n\nfetch.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  config.headers = {\n    Accept: \"application/json, text/plain, */*\",\n    Authorization: \"Basic bmVpemhlbjpuZWl6aGVu\",\n    ContentType: \"application/json;charset=UTF-8\"\n  };\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // respone拦截器 响应处理\n\nfetch.interceptors.response.use(function (response) {\n  // 根据自身业务定制化提示语\n  response.data.code === 1 && _notification.error({\n    message: \"系统提示\",\n    description: response.data.msg\n  });\n\n  if (response.config.responseType === \"blob\" || response.config.responseType === \"arraybuffer\" || response.data instanceof Blob || response.data instanceof ArrayBuffer) {\n    return response;\n  }\n\n  return response.data;\n}, function (error) {\n  // Do something with request error\n  errorHandler(error);\n  return Promise.resolve(error);\n});\nexport default fetch;","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/图元/react-visual-data/src/library/utils/http.js"],"names":["axios","isEmpty","codeMessage","errorHandler","error","response","status","errorText","statusText","url","message","description","fetch","create","baseURL","process","env","REACT_APP_API","timeout","retry","retryDelay","withCredentials","interceptors","request","use","config","headers","Accept","Authorization","ContentType","Promise","reject","data","code","msg","responseType","Blob","ArrayBuffer","resolve"],"mappings":"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","sourcesContent":["/**\n * request 网络请求工具，创建axios实例对象\n * send cookies when cross-domain requests\n */\nimport axios from \"axios\";\nimport { notification } from \"antd\";\nimport { isEmpty } from \"~utils/helper\";\n\nconst codeMessage = {\n  200: \"服务器成功返回请求的数据。\",\n  201: \"新建或修改数据成功。\",\n  202: \"一个请求已经进入后台排队（异步任务）。\",\n  204: \"删除数据成功。\",\n  400: \"发出的请求有错误，服务器没有进行新建或修改数据的操作。\",\n  401: \"用户没有权限（令牌、用户名、密码错误）。\",\n  403: \"用户得到授权，但是访问是被禁止的。\",\n  404: \"发出的请求针对的是不存在的记录，服务器没有进行操作。\",\n  406: \"请求的格式不可得。\",\n  410: \"请求的资源被永久删除，且不会再得到的。\",\n  422: \"当创建一个对象时，发生一个验证错误。\",\n  500: \"服务器发生错误，请检查服务器。\",\n  502: \"网关错误。\",\n  503: \"服务不可用，服务器暂时过载或维护。\",\n  504: \"网关超时。\"\n};\n\n/**\n * 异常处理程序\n */\nconst errorHandler = (error) => {\n  const { response } = error;\n  if (response && response.status) {\n    const errorText = codeMessage[response.status] || response.statusText;\n    const { status, url } = response;\n\n    notification.error({\n      message: `请求错误 ${status}: ${url}`,\n      description: errorText\n    });\n  }\n\n  if (!response) {\n    notification.error({\n      description: \"您的网络发生异常，无法连接服务器\",\n      message: \"网络异常\"\n    });\n  }\n  throw error;\n};\n\nconst fetch = axios.create({\n  baseURL: process.env.REACT_APP_API,\n  timeout: 15 * 1000, // 请求超时时间\n  retry: 4,\n  retryDelay: 500,\n  withCredentials: true\n});\n\n// request拦截器 请求处理\nfetch.interceptors.request.use(\n  (config) => {\n    // Do something before request is sent\n    config.headers = {\n      Accept: \"application/json, text/plain, */*\",\n      Authorization: \"Basic bmVpemhlbjpuZWl6aGVu\",\n      ContentType: \"application/json;charset=UTF-8\"\n    };\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// respone拦截器 响应处理\nfetch.interceptors.response.use(\n  (response) => {\n    // 根据自身业务定制化提示语\n    response.data.code === 1 &&\n      notification.error({\n        message: \"系统提示\",\n        description: response.data.msg\n      });\n\n    if (\n      response.config.responseType === \"blob\" ||\n      response.config.responseType === \"arraybuffer\" ||\n      response.data instanceof Blob ||\n      response.data instanceof ArrayBuffer\n    ) {\n      return response;\n    }\n    return response.data;\n  },\n  (error) => {\n    // Do something with request error\n    errorHandler(error);\n    return Promise.resolve(error);\n  }\n);\n\nexport default fetch;\n"]},"metadata":{},"sourceType":"module"}