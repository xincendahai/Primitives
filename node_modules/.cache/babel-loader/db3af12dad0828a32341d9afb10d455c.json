{"ast":null,"code":"import _toConsumableArray from \"/Users/xiangmingxin/Wicrecend/Primitives/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _arguments = arguments;\nimport { baseGet } from \"./utils\";\nimport { isEmpty } from \"~utils/helper\";\n/* eslint-disable prefer-rest-params */\n\nvar isLength = function isLength(str, options) {\n  var isString = typeof str === \"string\" || str instanceof String;\n\n  if (!isString) {\n    var invalidType = typeof str;\n    if (str === null) invalidType = \"null\";else if (invalidType === \"object\") invalidType = str.constructor.name;\n    throw new TypeError(\"Expected a string but received a \".concat(invalidType));\n  }\n\n  var min;\n  var max;\n\n  if (typeof options === \"object\") {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isLength(str, min [, max])\n    min = _arguments[1] || 0;\n    max = _arguments[2];\n  }\n\n  var surrogatePairs = str.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g) || [];\n  var len = str.length - surrogatePairs.length;\n  return len >= min && (typeof max === \"undefined\" || len <= max);\n};\n/**\n * 使用正则表达式验证 fork: amis\n * @param {*} reg 字符串 or 正则表达式\n */\n\n\nfunction matchRegexp(reg) {\n  if (reg instanceof RegExp) {\n    return reg;\n  }\n\n  if (/^(?:matchRegexp\\:)?\\/(.+)\\/([gimuy]*)$/.test(reg)) {\n    return new RegExp(RegExp.$1, RegExp.$2 || \"\");\n  }\n\n  if (typeof reg === \"string\") {\n    return new RegExp(reg);\n  }\n\n  return /^$/;\n}\n\nvar hasRepeat = function hasRepeat(list) {\n  return list.find(function (x, i, self) {\n    return i !== self.findIndex(function (y) {\n      return JSON.stringify(x) === JSON.stringify(y);\n    });\n  });\n};\n\nvar isEmptyObject = function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n};\n\nvar isEmptyValue = function isEmptyValue(value, schema) {\n  // 多选组件的值为 [] 时，也判断为空值\n  if (schema.type === \"array\" && schema.enum) {\n    return !value || value.length === 0;\n  } // boolean里的false, number里的0, 都不要认为是空值\n\n\n  if (value === 0 || value === false) {\n    return false;\n  }\n\n  return !value;\n};\n\nexport var getValidateText = function getValidateText(obj) {\n  var value = obj.value,\n      defaultValue = obj.defaultValue,\n      _obj$schema = obj.schema,\n      schema = _obj$schema === void 0 ? {} : _obj$schema;\n  var type = schema.type,\n      format = schema.format,\n      pattern = schema.pattern,\n      message = schema.message,\n      minLength = schema.minLength,\n      maxLength = schema.maxLength,\n      minimum = schema.minimum,\n      maximum = schema.maximum,\n      minItems = schema.minItems,\n      maxItems = schema.maxItems,\n      uniqueItems = schema.uniqueItems,\n      _schema$required = schema.required,\n      required = _schema$required === void 0 ? false : _schema$required;\n  var defineValue = [undefined, null].indexOf(value) > -1 ? defaultValue : value;\n\n  if (type === \"number\" && value === 0) {\n    defineValue = 0;\n  }\n\n  var needPattern = pattern && [\"string\", \"number\"].indexOf(type) > -1; // schema 里面没有内容的，直接退出\n\n  if (isEmptyObject(schema)) {\n    return false;\n  } // 校验是否为required\n\n\n  if (required && isEmptyValue(defineValue, schema)) {\n    return message && message.required || \"不能为空\";\n  } // 字符串相关校验\n\n\n  if (type === \"string\") {\n    var _defineValue = defineValue;\n\n    if (typeof defineValue !== \"string\") {\n      if (defineValue === null || defineValue === undefined) {\n        _defineValue = \"\";\n      } else {\n        _defineValue = String(defineValue);\n      }\n    }\n\n    if (_defineValue && maxLength) {\n      if (!isLength(_defineValue, 0, parseInt(maxLength, 10))) {\n        return message && message.maxLength || \"\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E \".concat(maxLength);\n      }\n    }\n\n    if (_defineValue && (minLength || minLength === 0)) {\n      if (!_defineValue || !isLength(_defineValue, parseInt(minLength, 10), undefined)) {\n        return message && message.minLength || \"\\u957F\\u5EA6\\u4E0D\\u80FD\\u5C0F\\u4E8E \".concat(minLength);\n      }\n    }\n\n    if (format === \"email\") {\n      if (_defineValue && needPattern && !matchRegexp(pattern).test(_defineValue)) {\n        return message && message.email || \"请输入正确的email格式\";\n      }\n    }\n  } // 数字相关校验\n\n\n  if (type === \"number\") {\n    if (typeof defineValue !== \"number\") {\n      return \"请填写数字\";\n    }\n\n    if (maximum && parseFloat(defineValue, 10) > maximum) {\n      return message && message.maximum || \"\\u6570\\u503C\\u4E0D\\u80FD\\u5927\\u4E8E \".concat(maximum);\n    }\n\n    if ((minimum || minimum === 0) && parseFloat(defineValue, 10) < minimum) {\n      return message && message.minimum || \"\\u6570\\u503C\\u4E0D\\u80FD\\u5C0F\\u4E8E \".concat(minimum);\n    }\n  } // 正则只对数字和字符串有效果\n\n\n  if (defineValue && needPattern && !matchRegexp(pattern).test(defineValue)) {\n    return message && message.pattern || \"格式不匹配\";\n  } // 数组项目相关校验\n\n\n  if (type === \"array\") {\n    if (maxItems && defineValue && defineValue.length > maxItems) {\n      return message && message.maxItems || \"\\u6570\\u7EC4\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E \".concat(maxItems);\n    }\n\n    if ((minItems || minItems === 0) && defineValue && defineValue.length < minItems) {\n      return message && message.minItems || \"\\u6570\\u7EC4\\u957F\\u5EA6\\u4E0D\\u80FD\\u5C0F\\u4E8E \".concat(minItems);\n    }\n\n    if (uniqueItems && Array.isArray(defineValue) && defineValue.length > 1) {\n      if (typeof uniqueItems === \"boolean\") {\n        if (hasRepeat(defineValue)) {\n          return \"存在重复元素\";\n        }\n      }\n\n      if (typeof uniqueItems === \"string\") {\n        try {\n          var nameList = defineValue.map(function (item) {\n            return baseGet(item, uniqueItems);\n          }); // 只考虑非object的情况\n\n          var isRepeat = nameList.find(function (x, index) {\n            return nameList.indexOf(x) !== index;\n          });\n\n          if (isRepeat) {\n            return uniqueItems + \" 的值存在重复的\";\n          }\n        } catch (e) {}\n      }\n    }\n  }\n\n  return false;\n};\n\nvar deepValidate = function deepValidate(key, value) {\n  var schema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var formData = arguments.length > 3 ? arguments[3] : undefined;\n  var checkList = [];\n  var type = schema.type;\n  var obj = {\n    value: value,\n    schema: schema\n  };\n\n  if (type === \"object\") {\n    var list = getValidateList(value, schema, formData); // eslint-disable-line\n\n    checkList.push.apply(checkList, _toConsumableArray(list));\n  }\n\n  if (getValidateText(obj)) {\n    checkList.push({\n      key: key,\n      label: schema.title,\n      message: getValidateText(obj)\n    });\n  }\n\n  return checkList;\n};\n\nexport var getValidateList = function getValidateList() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var formData = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _formData = formData || values;\n\n  var checkList = [];\n  var properties = schema.properties; // 校验必填（required 属性)\n\n  if (!isEmpty(properties) && !isEmpty(values)) {\n    Object.keys(values).forEach(function (key) {\n      var curSchema = properties[key] || {};\n      var list = deepValidate(key, values[key], curSchema, _formData);\n      checkList.push.apply(checkList, _toConsumableArray(list));\n    });\n  }\n\n  return checkList;\n};","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/Primitives/src/library/form-render/validate.js"],"names":["baseGet","isEmpty","isLength","str","options","isString","String","invalidType","constructor","name","TypeError","min","max","arguments","surrogatePairs","match","len","length","matchRegexp","reg","RegExp","test","$1","$2","hasRepeat","list","find","x","i","self","findIndex","y","JSON","stringify","isEmptyObject","obj","Object","keys","isEmptyValue","value","schema","type","enum","getValidateText","defaultValue","format","pattern","message","minLength","maxLength","minimum","maximum","minItems","maxItems","uniqueItems","required","defineValue","undefined","indexOf","needPattern","_defineValue","parseInt","email","parseFloat","Array","isArray","nameList","map","item","isRepeat","index","e","deepValidate","key","formData","checkList","getValidateList","push","label","title","values","_formData","properties","forEach","curSchema"],"mappings":"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","sourcesContent":["import { baseGet } from \"./utils\";\nimport { isEmpty } from \"~utils/helper\";\n\n/* eslint-disable prefer-rest-params */\nconst isLength = (str, options) => {\n  const isString = typeof str === \"string\" || str instanceof String;\n\n  if (!isString) {\n    let invalidType = typeof str;\n    if (str === null) invalidType = \"null\";\n    else if (invalidType === \"object\") invalidType = str.constructor.name;\n\n    throw new TypeError(`Expected a string but received a ${invalidType}`);\n  }\n\n  let min;\n  let max;\n  if (typeof options === \"object\") {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isLength(str, min [, max])\n    min = arguments[1] || 0;\n    max = arguments[2];\n  }\n  const surrogatePairs = str.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g) || [];\n  const len = str.length - surrogatePairs.length;\n  return len >= min && (typeof max === \"undefined\" || len <= max);\n};\n\n/**\n * 使用正则表达式验证 fork: amis\n * @param {*} reg 字符串 or 正则表达式\n */\nfunction matchRegexp(reg) {\n  if (reg instanceof RegExp) {\n    return reg;\n  }\n\n  if (/^(?:matchRegexp\\:)?\\/(.+)\\/([gimuy]*)$/.test(reg)) {\n    return new RegExp(RegExp.$1, RegExp.$2 || \"\");\n  }\n  if (typeof reg === \"string\") {\n    return new RegExp(reg);\n  }\n\n  return /^$/;\n}\n\nconst hasRepeat = (list) => {\n  return list.find((x, i, self) => i !== self.findIndex((y) => JSON.stringify(x) === JSON.stringify(y)));\n};\n\nconst isEmptyObject = (obj) => Object.keys(obj).length === 0 && obj.constructor === Object;\n\nconst isEmptyValue = (value, schema) => {\n  // 多选组件的值为 [] 时，也判断为空值\n  if (schema.type === \"array\" && schema.enum) {\n    return !value || value.length === 0;\n  }\n  // boolean里的false, number里的0, 都不要认为是空值\n  if (value === 0 || value === false) {\n    return false;\n  }\n  return !value;\n};\n\nexport const getValidateText = (obj) => {\n  const { value, defaultValue, schema = {} } = obj;\n  const {\n    type,\n    format,\n    pattern,\n    message,\n    minLength,\n    maxLength,\n    minimum,\n    maximum,\n    minItems,\n    maxItems,\n    uniqueItems,\n    required = false\n  } = schema;\n\n  let defineValue = [undefined, null].indexOf(value) > -1 ? defaultValue : value;\n\n  if (type === \"number\" && value === 0) {\n    defineValue = 0;\n  }\n  const needPattern = pattern && [\"string\", \"number\"].indexOf(type) > -1;\n  // schema 里面没有内容的，直接退出\n  if (isEmptyObject(schema)) {\n    return false;\n  }\n\n  // 校验是否为required\n  if (required && isEmptyValue(defineValue, schema)) {\n    return (message && message.required) || \"不能为空\";\n  }\n  // 字符串相关校验\n  if (type === \"string\") {\n    let _defineValue = defineValue;\n    if (typeof defineValue !== \"string\") {\n      if (defineValue === null || defineValue === undefined) {\n        _defineValue = \"\";\n      } else {\n        _defineValue = String(defineValue);\n      }\n    }\n\n    if (_defineValue && maxLength) {\n      if (!isLength(_defineValue, 0, parseInt(maxLength, 10))) {\n        return (message && message.maxLength) || `长度不能大于 ${maxLength}`;\n      }\n    }\n    if (_defineValue && (minLength || minLength === 0)) {\n      if (!_defineValue || !isLength(_defineValue, parseInt(minLength, 10), undefined)) {\n        return (message && message.minLength) || `长度不能小于 ${minLength}`;\n      }\n    }\n    if (format === \"email\") {\n      if (_defineValue && needPattern && !matchRegexp(pattern).test(_defineValue)) {\n        return (message && message.email) || \"请输入正确的email格式\";\n      }\n    }\n  }\n\n  // 数字相关校验\n  if (type === \"number\") {\n    if (typeof defineValue !== \"number\") {\n      return \"请填写数字\";\n    }\n    if (maximum && parseFloat(defineValue, 10) > maximum) {\n      return (message && message.maximum) || `数值不能大于 ${maximum}`;\n    }\n    if ((minimum || minimum === 0) && parseFloat(defineValue, 10) < minimum) {\n      return (message && message.minimum) || `数值不能小于 ${minimum}`;\n    }\n  }\n\n  // 正则只对数字和字符串有效果\n  if (defineValue && needPattern && !matchRegexp(pattern).test(defineValue)) {\n    return (message && message.pattern) || \"格式不匹配\";\n  }\n\n  // 数组项目相关校验\n  if (type === \"array\") {\n    if (maxItems && defineValue && defineValue.length > maxItems) {\n      return (message && message.maxItems) || `数组长度不能大于 ${maxItems}`;\n    }\n\n    if ((minItems || minItems === 0) && defineValue && defineValue.length < minItems) {\n      return (message && message.minItems) || `数组长度不能小于 ${minItems}`;\n    }\n\n    if (uniqueItems && Array.isArray(defineValue) && defineValue.length > 1) {\n      if (typeof uniqueItems === \"boolean\") {\n        if (hasRepeat(defineValue)) {\n          return \"存在重复元素\";\n        }\n      }\n      if (typeof uniqueItems === \"string\") {\n        try {\n          const nameList = defineValue.map((item) => baseGet(item, uniqueItems));\n          // 只考虑非object的情况\n          const isRepeat = nameList.find((x, index) => nameList.indexOf(x) !== index);\n          if (isRepeat) {\n            return uniqueItems + \" 的值存在重复的\";\n          }\n        } catch (e) {}\n      }\n    }\n  }\n\n  return false;\n};\n\nconst deepValidate = (key, value, schema = {}, formData) => {\n  const checkList = [];\n  const { type } = schema;\n  const obj = { value, schema };\n\n  if (type === \"object\") {\n    const list = getValidateList(value, schema, formData); // eslint-disable-line\n    checkList.push(...list);\n  }\n\n  if (getValidateText(obj)) {\n    checkList.push({\n      key: key,\n      label: schema.title,\n      message: getValidateText(obj)\n    });\n  }\n  return checkList;\n};\n\nexport const getValidateList = (values = {}, schema = {}, formData) => {\n  const _formData = formData || values;\n  const checkList = [];\n  const { properties } = schema;\n  // 校验必填（required 属性)\n  if (!isEmpty(properties) && !isEmpty(values)) {\n    Object.keys(values).forEach((key) => {\n      const curSchema = properties[key] || {};\n      const list = deepValidate(key, values[key], curSchema, _formData);\n      checkList.push(...list);\n    });\n  }\n\n  return checkList;\n};\n"]},"metadata":{},"sourceType":"module"}