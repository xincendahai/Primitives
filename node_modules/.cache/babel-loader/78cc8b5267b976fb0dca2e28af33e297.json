{"ast":null,"code":"'use strict';\n\nvar copyTextToClipboard = function copyTextToClipboard(input) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$target = _ref.target,\n      target = _ref$target === void 0 ? document.body : _ref$target;\n\n  var element = document.createElement('textarea');\n  var previouslyFocusedElement = document.activeElement;\n  element.value = input; // Prevent keyboard from showing on mobile\n\n  element.setAttribute('readonly', '');\n  element.style.contain = 'strict';\n  element.style.position = 'absolute';\n  element.style.left = '-9999px';\n  element.style.fontSize = '12pt'; // Prevent zooming on iOS\n\n  var selection = document.getSelection();\n  var originalRange = false;\n\n  if (selection.rangeCount > 0) {\n    originalRange = selection.getRangeAt(0);\n  }\n\n  target.append(element);\n  element.select(); // Explicit selection workaround for iOS\n\n  element.selectionStart = 0;\n  element.selectionEnd = input.length;\n  var isSuccess = false;\n\n  try {\n    isSuccess = document.execCommand('copy');\n  } catch (_) {}\n\n  element.remove();\n\n  if (originalRange) {\n    selection.removeAllRanges();\n    selection.addRange(originalRange);\n  } // Get the focus back on the previously focused element, if any\n\n\n  if (previouslyFocusedElement) {\n    previouslyFocusedElement.focus();\n  }\n\n  return isSuccess;\n};\n\nmodule.exports = copyTextToClipboard; // TODO: Remove this for the next major release\n\nmodule.exports.default = copyTextToClipboard;","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/图元/react-visual-data/node_modules/copy-text-to-clipboard/index.js"],"names":["copyTextToClipboard","input","target","document","body","element","createElement","previouslyFocusedElement","activeElement","value","setAttribute","style","contain","position","left","fontSize","selection","getSelection","originalRange","rangeCount","getRangeAt","append","select","selectionStart","selectionEnd","length","isSuccess","execCommand","_","remove","removeAllRanges","addRange","focus","module","exports","default"],"mappings":"AAAA;;AAEA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAA0C;AAAA,iFAAP,EAAO;AAAA,yBAAjCC,MAAiC;AAAA,MAAjCA,MAAiC,4BAAxBC,QAAQ,CAACC,IAAe;;AACrE,MAAMC,OAAO,GAAGF,QAAQ,CAACG,aAAT,CAAuB,UAAvB,CAAhB;AACA,MAAMC,wBAAwB,GAAGJ,QAAQ,CAACK,aAA1C;AAEAH,EAAAA,OAAO,CAACI,KAAR,GAAgBR,KAAhB,CAJqE,CAMrE;;AACAI,EAAAA,OAAO,CAACK,YAAR,CAAqB,UAArB,EAAiC,EAAjC;AAEAL,EAAAA,OAAO,CAACM,KAAR,CAAcC,OAAd,GAAwB,QAAxB;AACAP,EAAAA,OAAO,CAACM,KAAR,CAAcE,QAAd,GAAyB,UAAzB;AACAR,EAAAA,OAAO,CAACM,KAAR,CAAcG,IAAd,GAAqB,SAArB;AACAT,EAAAA,OAAO,CAACM,KAAR,CAAcI,QAAd,GAAyB,MAAzB,CAZqE,CAYpC;;AAEjC,MAAMC,SAAS,GAAGb,QAAQ,CAACc,YAAT,EAAlB;AACA,MAAIC,aAAa,GAAG,KAApB;;AACA,MAAIF,SAAS,CAACG,UAAV,GAAuB,CAA3B,EAA8B;AAC7BD,IAAAA,aAAa,GAAGF,SAAS,CAACI,UAAV,CAAqB,CAArB,CAAhB;AACA;;AAEDlB,EAAAA,MAAM,CAACmB,MAAP,CAAchB,OAAd;AACAA,EAAAA,OAAO,CAACiB,MAAR,GArBqE,CAuBrE;;AACAjB,EAAAA,OAAO,CAACkB,cAAR,GAAyB,CAAzB;AACAlB,EAAAA,OAAO,CAACmB,YAAR,GAAuBvB,KAAK,CAACwB,MAA7B;AAEA,MAAIC,SAAS,GAAG,KAAhB;;AACA,MAAI;AACHA,IAAAA,SAAS,GAAGvB,QAAQ,CAACwB,WAAT,CAAqB,MAArB,CAAZ;AACA,GAFD,CAEE,OAAOC,CAAP,EAAU,CAAE;;AAEdvB,EAAAA,OAAO,CAACwB,MAAR;;AAEA,MAAIX,aAAJ,EAAmB;AAClBF,IAAAA,SAAS,CAACc,eAAV;AACAd,IAAAA,SAAS,CAACe,QAAV,CAAmBb,aAAnB;AACA,GArCoE,CAuCrE;;;AACA,MAAIX,wBAAJ,EAA8B;AAC7BA,IAAAA,wBAAwB,CAACyB,KAAzB;AACA;;AAED,SAAON,SAAP;AACA,CA7CD;;AA+CAO,MAAM,CAACC,OAAP,GAAiBlC,mBAAjB,C,CACA;;AACAiC,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBnC,mBAAzB","sourcesContent":["'use strict';\n\nconst copyTextToClipboard = (input, {target = document.body} = {}) => {\n\tconst element = document.createElement('textarea');\n\tconst previouslyFocusedElement = document.activeElement;\n\n\telement.value = input;\n\n\t// Prevent keyboard from showing on mobile\n\telement.setAttribute('readonly', '');\n\n\telement.style.contain = 'strict';\n\telement.style.position = 'absolute';\n\telement.style.left = '-9999px';\n\telement.style.fontSize = '12pt'; // Prevent zooming on iOS\n\n\tconst selection = document.getSelection();\n\tlet originalRange = false;\n\tif (selection.rangeCount > 0) {\n\t\toriginalRange = selection.getRangeAt(0);\n\t}\n\n\ttarget.append(element);\n\telement.select();\n\n\t// Explicit selection workaround for iOS\n\telement.selectionStart = 0;\n\telement.selectionEnd = input.length;\n\n\tlet isSuccess = false;\n\ttry {\n\t\tisSuccess = document.execCommand('copy');\n\t} catch (_) {}\n\n\telement.remove();\n\n\tif (originalRange) {\n\t\tselection.removeAllRanges();\n\t\tselection.addRange(originalRange);\n\t}\n\n\t// Get the focus back on the previously focused element, if any\n\tif (previouslyFocusedElement) {\n\t\tpreviouslyFocusedElement.focus();\n\t}\n\n\treturn isSuccess;\n};\n\nmodule.exports = copyTextToClipboard;\n// TODO: Remove this for the next major release\nmodule.exports.default = copyTextToClipboard;\n"]},"metadata":{},"sourceType":"script"}