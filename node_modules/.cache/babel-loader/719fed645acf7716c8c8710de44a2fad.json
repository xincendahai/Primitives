{"ast":null,"code":"import \"antd/es/upload/style\";\nimport _Upload from \"antd/es/upload\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport _slicedToArray from \"/Users/xiangmingxin/Wicrecend/Primitives/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/xiangmingxin/Wicrecend/Primitives/src/materials/form/upload/excel.js\";\nimport React, { useState, useEffect } from \"react\";\nimport XLSX from \"xlsx\";\nimport { IconFont } from \"~components\";\n\nfunction isExcel(file) {\n  return /\\.(xlsx|xls|csv)$/.test(file.name);\n}\n\nfunction getHeaderRow(sheet) {\n  var headers = [];\n  var range = XLSX.utils.decode_range(sheet[\"!ref\"]);\n  var C;\n  var R = range.s.r;\n  /* start in the first row */\n\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    var cell = sheet[XLSX.utils.encode_cell({\n      c: C,\n      r: R\n    })];\n    /* find the cell in the first row */\n\n    var hdr = \"未知 \" + C; // <-- replace with your desired default\n\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n\n  return headers;\n}\n\nfunction VUploadExcel(props) {\n  var _useState = useState({\n    header: null,\n    results: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      excelData = _useState2[0],\n      setExcelData = _useState2[1]; // TODO：上传逻辑\n\n\n  var readerData = function readerData(raw) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        var data = e.target.result;\n        var namespace = XLSX.read(data, {\n          type: \"array\"\n        });\n        var firstSheetName = namespace.SheetNames[0];\n        var worksheet = namespace.Sheets[firstSheetName];\n        var header = getHeaderRow(worksheet);\n        var results = XLSX.utils.sheet_to_json(worksheet);\n        setExcelData({\n          header: header,\n          results: results\n        });\n        console.log(\"header\", header, \"results\", results);\n        resolve();\n      };\n\n      reader.readAsArrayBuffer(raw);\n\n      reader.onerror = function (error) {\n        return reject(error);\n      };\n    });\n  };\n\n  var renderProps = {\n    name: \"file\",\n    action: props.action,\n    withCredentials: true,\n    multiple: false,\n    accept: \"application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    listType: \"picture\",\n    progress: {\n      strokeColor: {\n        \"0%\": \"#108ee9\",\n        \"100%\": \"#87d068\"\n      },\n      strokeWidth: 3,\n      format: function format(percents) {\n        return \"\".concat(percent(percents, 2));\n      }\n    },\n    onChange: function onChange(info) {\n      var _info$file = info.file,\n          status = _info$file.status,\n          name = _info$file.name;\n\n      if (status === \"done\") {\n        _message.success(\"\".concat(name, \" \\u6587\\u4EF6\\u4E0A\\u4F20\\u6210\\u529F\"));\n\n        console.log(\"response\", excelData);\n        props.onChange(props.name, excelData);\n      } else if (status === \"error\") {\n        _message.error(\"\".concat(name, \" \\u6587\\u4EF6\\u4E0A\\u4F20\\u5931\\u8D25\"));\n\n        props.onChange(props.name, \"\");\n      }\n    },\n    beforeUpload: function beforeUpload(file) {\n      if (!isExcel(file)) {\n        _message.error(\"仅支持上传.xlsx, .xls, .csv 文件\");\n\n        return false;\n      }\n    },\n    customRequest: function customRequest(e) {\n      readerData(e.file).then(function () {\n        e.onSuccess();\n      });\n    },\n    onRemove: function onRemove() {\n      props.onChange(props.name, \"\");\n    }\n  };\n  useEffect(function () {\n    props.onChange(props.name, excelData);\n  }, [excelData.header]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gc-upload-mod\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Upload.Dragger, Object.assign({}, renderProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(_Button, {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IconFont, {\n    antd: true,\n    type: \"UploadOutlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), \" \\u4E0A\\u4F20\")));\n}\n\nexport default VUploadExcel;","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/Primitives/src/materials/form/upload/excel.js"],"names":["React","useState","useEffect","XLSX","IconFont","isExcel","file","test","name","getHeaderRow","sheet","headers","range","utils","decode_range","C","R","s","r","c","e","cell","encode_cell","hdr","t","format_cell","push","VUploadExcel","props","header","results","excelData","setExcelData","readerData","raw","Promise","resolve","reject","reader","FileReader","onload","data","target","result","namespace","read","type","firstSheetName","SheetNames","worksheet","Sheets","sheet_to_json","console","log","readAsArrayBuffer","onerror","error","renderProps","action","withCredentials","multiple","accept","listType","progress","strokeColor","strokeWidth","format","percents","percent","onChange","info","status","success","beforeUpload","customRequest","then","onSuccess","onRemove"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Upload, message } from \"antd\";\nimport XLSX from \"xlsx\";\nimport { IconFont } from \"~components\";\n\nfunction isExcel(file) {\n  return /\\.(xlsx|xls|csv)$/.test(file.name);\n}\n\nfunction getHeaderRow(sheet) {\n  const headers = [];\n  const range = XLSX.utils.decode_range(sheet[\"!ref\"]);\n  let C;\n  const R = range.s.r;\n  /* start in the first row */\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })];\n    /* find the cell in the first row */\n    let hdr = \"未知 \" + C; // <-- replace with your desired default\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n  return headers;\n}\n\nfunction VUploadExcel(props) {\n  const [excelData, setExcelData] = useState({\n    header: null,\n    results: null\n  });\n\n  // TODO：上传逻辑\n  const readerData = (raw) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const data = e.target.result;\n        const namespace = XLSX.read(data, { type: \"array\" });\n        const firstSheetName = namespace.SheetNames[0];\n        const worksheet = namespace.Sheets[firstSheetName];\n        const header = getHeaderRow(worksheet);\n        const results = XLSX.utils.sheet_to_json(worksheet);\n\n        setExcelData({ header, results });\n        console.log(\"header\", header, \"results\", results);\n        resolve();\n      };\n      reader.readAsArrayBuffer(raw);\n\n      reader.onerror = (error) => reject(error);\n    });\n  };\n\n  const renderProps = {\n    name: \"file\",\n    action: props.action,\n    withCredentials: true,\n    multiple: false,\n    accept: \"application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    listType: \"picture\",\n    progress: {\n      strokeColor: {\n        \"0%\": \"#108ee9\",\n        \"100%\": \"#87d068\"\n      },\n      strokeWidth: 3,\n      format: (percents) => `${percent(percents, 2)}`\n    },\n    onChange(info) {\n      const { status, name } = info.file;\n      if (status === \"done\") {\n        message.success(`${name} 文件上传成功`);\n        console.log(\"response\", excelData);\n        props.onChange(props.name, excelData);\n      } else if (status === \"error\") {\n        message.error(`${name} 文件上传失败`);\n        props.onChange(props.name, \"\");\n      }\n    },\n    beforeUpload(file) {\n      if (!isExcel(file)) {\n        message.error(\"仅支持上传.xlsx, .xls, .csv 文件\");\n        return false;\n      }\n    },\n    customRequest(e) {\n      readerData(e.file).then(() => {\n        e.onSuccess();\n      });\n    },\n    onRemove() {\n      props.onChange(props.name, \"\");\n    }\n  };\n\n  useEffect(() => {\n    props.onChange(props.name, excelData);\n  }, [excelData.header]);\n\n  return (\n    <div className=\"gc-upload-mod\">\n      <Upload.Dragger {...renderProps}>\n        <Button type=\"text\">\n          <IconFont antd={true} type=\"UploadOutlined\" /> 上传\n        </Button>\n      </Upload.Dragger>\n    </div>\n  );\n}\n\nexport default VUploadExcel;\n"]},"metadata":{},"sourceType":"module"}