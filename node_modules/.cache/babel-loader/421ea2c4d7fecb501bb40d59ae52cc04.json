{"ast":null,"code":"import _slicedToArray from \"/Users/xiangmingxin/Wicrecend/\\u56FE\\u5143/react-visual-data/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/xiangmingxin/Wicrecend/\\u56FE\\u5143/react-visual-data/src/components/monaco-editor/index.jsx\";\nimport React, { useRef, useState, useEffect, useImperativeHandle, forwardRef } from \"react\";\nimport MonacoEditor, { monaco } from \"@monaco-editor/react\";\nimport { converLayout } from \"~utils/helper\";\nimport Loading from \"../auto-loading\";\n\nfunction CodePanel(props, ref) {\n  var editorRef = useRef();\n\n  var _useState = useState(\"// try to write code somewhere ðŸ˜ˆ \\n\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      code = _useState2[0],\n      setCode = _useState2[1];\n\n  var value = props.value,\n      width = props.width,\n      height = props.height,\n      _props$readOnly = props.readOnly,\n      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n      _props$language = props.language,\n      language = _props$language === void 0 ? \"json\" : _props$language; // you can configure the locales\n\n  monaco.config({\n    \"vs/nls\": {\n      availableLanguages: {\n        \"*\": \"zh-cn\"\n      }\n    }\n  });\n  useImperativeHandle(ref, function () {\n    return {\n      getValue: function getValue() {\n        return JSON.parse(editorRef.current.getValue());\n      }\n    };\n  });\n  useEffect(function () {\n    try {\n      setCode(JSON.stringify(value, null, 4));\n    } catch (e) {\n      // ignore\n      throw new Error(e);\n    }\n  }, [value, language]);\n  return /*#__PURE__*/React.createElement(MonacoEditor, {\n    width: converLayout(width),\n    height: converLayout(height),\n    theme: \"dark\",\n    language: language,\n    loading: /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 16\n      }\n    }),\n    value: code,\n    options: {\n      contextmenu: false,\n      wrappingIndent: \"deepIndent\",\n      readOnly: readOnly,\n      automaticLayout: true,\n      autoIndent: true,\n      formatOnType: true,\n      formatOnPaste: true,\n      scrollBeyondLastLine: false,\n      renderControlCharacters: false,\n      minimap: {\n        enabled: false\n      }\n    },\n    editorDidMount: function editorDidMount(ev, editor) {\n      editorRef.current = editor;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default forwardRef(CodePanel);","map":{"version":3,"sources":["/Users/xiangmingxin/Wicrecend/å›¾å…ƒ/react-visual-data/src/components/monaco-editor/index.jsx"],"names":["React","useRef","useState","useEffect","useImperativeHandle","forwardRef","MonacoEditor","monaco","converLayout","Loading","CodePanel","props","ref","editorRef","code","setCode","value","width","height","readOnly","language","config","availableLanguages","getValue","JSON","parse","current","stringify","e","Error","contextmenu","wrappingIndent","automaticLayout","autoIndent","formatOnType","formatOnPaste","scrollBeyondLastLine","renderControlCharacters","minimap","enabled","ev","editor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,mBAA7C,EAAkEC,UAAlE,QAAoF,OAApF;AACA,OAAOC,YAAP,IAAuBC,MAAvB,QAAqC,sBAArC;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,OAAP,MAAoB,iBAApB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,GAA1B,EAA+B;AAC7B,MAAMC,SAAS,GAAGZ,MAAM,EAAxB;;AAD6B,kBAELC,QAAQ,CAAC,sCAAD,CAFH;AAAA;AAAA,MAEtBY,IAFsB;AAAA,MAEhBC,OAFgB;;AAAA,MAGvBC,KAHuB,GAGuCL,KAHvC,CAGvBK,KAHuB;AAAA,MAGhBC,KAHgB,GAGuCN,KAHvC,CAGhBM,KAHgB;AAAA,MAGTC,MAHS,GAGuCP,KAHvC,CAGTO,MAHS;AAAA,wBAGuCP,KAHvC,CAGDQ,QAHC;AAAA,MAGDA,QAHC,gCAGU,KAHV;AAAA,wBAGuCR,KAHvC,CAGiBS,QAHjB;AAAA,MAGiBA,QAHjB,gCAG4B,MAH5B,oBAK7B;;AACAb,EAAAA,MAAM,CAACc,MAAP,CAAc;AAAE,cAAU;AAAEC,MAAAA,kBAAkB,EAAE;AAAE,aAAK;AAAP;AAAtB;AAAZ,GAAd;AAEAlB,EAAAA,mBAAmB,CAACQ,GAAD,EAAM;AAAA,WAAO;AAC9BW,MAAAA,QAAQ,EAAE;AAAA,eAAMC,IAAI,CAACC,KAAL,CAAWZ,SAAS,CAACa,OAAV,CAAkBH,QAAlB,EAAX,CAAN;AAAA;AADoB,KAAP;AAAA,GAAN,CAAnB;AAIApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI;AACFY,MAAAA,OAAO,CAACS,IAAI,CAACG,SAAL,CAAeX,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAD,CAAP;AACD,KAFD,CAEE,OAAOY,CAAP,EAAU;AACV;AACA,YAAM,IAAIC,KAAJ,CAAUD,CAAV,CAAN;AACD;AACF,GAPQ,EAON,CAACZ,KAAD,EAAQI,QAAR,CAPM,CAAT;AASA,sBACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAEZ,YAAY,CAACS,KAAD,CADrB;AAEE,IAAA,MAAM,EAAET,YAAY,CAACU,MAAD,CAFtB;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,QAAQ,EAAEE,QAJZ;AAKE,IAAA,OAAO,eAAE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALX;AAME,IAAA,KAAK,EAAEN,IANT;AAOE,IAAA,OAAO,EAAE;AACPgB,MAAAA,WAAW,EAAE,KADN;AAEPC,MAAAA,cAAc,EAAE,YAFT;AAGPZ,MAAAA,QAAQ,EAAEA,QAHH;AAIPa,MAAAA,eAAe,EAAE,IAJV;AAKPC,MAAAA,UAAU,EAAE,IALL;AAMPC,MAAAA,YAAY,EAAE,IANP;AAOPC,MAAAA,aAAa,EAAE,IAPR;AAQPC,MAAAA,oBAAoB,EAAE,KARf;AASPC,MAAAA,uBAAuB,EAAE,KATlB;AAUPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE;AADF;AAVF,KAPX;AAqBE,IAAA,cAAc,EAAE,wBAACC,EAAD,EAAKC,MAAL,EAAgB;AAC9B5B,MAAAA,SAAS,CAACa,OAAV,GAAoBe,MAApB;AACD,KAvBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA2BD;;AAED,eAAepC,UAAU,CAACK,SAAD,CAAzB","sourcesContent":["import React, { useRef, useState, useEffect, useImperativeHandle, forwardRef } from \"react\";\nimport MonacoEditor, { monaco } from \"@monaco-editor/react\";\nimport { converLayout } from \"~utils/helper\";\nimport Loading from \"../auto-loading\";\n\nfunction CodePanel(props, ref) {\n  const editorRef = useRef();\n  const [code, setCode] = useState(\"// try to write code somewhere ðŸ˜ˆ \\n\");\n  let { value, width, height, readOnly = false, language = \"json\" } = props;\n\n  // you can configure the locales\n  monaco.config({ \"vs/nls\": { availableLanguages: { \"*\": \"zh-cn\" } } });\n\n  useImperativeHandle(ref, () => ({\n    getValue: () => JSON.parse(editorRef.current.getValue())\n  }));\n\n  useEffect(() => {\n    try {\n      setCode(JSON.stringify(value, null, 4));\n    } catch (e) {\n      // ignore\n      throw new Error(e);\n    }\n  }, [value, language]);\n\n  return (\n    <MonacoEditor\n      width={converLayout(width)}\n      height={converLayout(height)}\n      theme=\"dark\"\n      language={language}\n      loading={<Loading />}\n      value={code}\n      options={{\n        contextmenu: false,\n        wrappingIndent: \"deepIndent\",\n        readOnly: readOnly,\n        automaticLayout: true,\n        autoIndent: true,\n        formatOnType: true,\n        formatOnPaste: true,\n        scrollBeyondLastLine: false,\n        renderControlCharacters: false,\n        minimap: {\n          enabled: false\n        }\n      }}\n      editorDidMount={(ev, editor) => {\n        editorRef.current = editor;\n      }}\n    />\n  );\n}\n\nexport default forwardRef(CodePanel);\n"]},"metadata":{},"sourceType":"module"}